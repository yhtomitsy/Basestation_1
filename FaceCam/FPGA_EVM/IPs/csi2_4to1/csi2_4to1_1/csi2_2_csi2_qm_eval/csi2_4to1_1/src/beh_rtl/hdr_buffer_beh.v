// hdr_buffer_beh.v generated by Lattice IP Model Creator version 1
// created on Mon, Jan 30, 2017  8:49:00 AM
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top

`timescale 1 ns / 100 ps
module uid1af9 (
    input	mg8d7c8,
    input	zx6be40,
    input	th5f207,

    output	ldf903e
);
reg [1:0]	pfc81f6;
reg xj40fb6;
reg [2047:0] ir7db7;
wire [0:0] mg3edbc;

localparam xjf6de0 = 1,aab6f06 = 32'hfdffc68b;
localparam [31:0] zmb7830 = aab6f06;
localparam aye0c10 = aab6f06 & 4'hf;
localparam [11:0] ba30407 = 'h7ff;
wire [(1 << aye0c10) -1:0] aa101d1;
reg [xjf6de0-1:0] oh744d;
reg [aye0c10-1:0] god136b [0:1];
reg [aye0c10-1:0] dm4dacb;
reg go6d65b;
integer xj6b2d9;
integer ww596ce;

always @(posedge mg8d7c8 or negedge zx6be40)   if (!zx6be40) begin      pfc81f6	<= 0;   end   else begin      pfc81f6[0]	<= xj40fb6;      pfc81f6[1]	<= pfc81f6[0];   end
assign ldf903e = pfc81f6[1];
always@* begin xj40fb6<=mg3edbc[0];end
always@* begin ir7db7[1023]<=th5f207;end         assign aa101d1 = ir7db7,mg3edbc = oh744d; initial begin xj6b2d9 = $fopen(".fred"); $fdisplay( xj6b2d9, "%3h\n%3h", (zmb7830 >> 4) & ba30407, (zmb7830 >> (aye0c10+4)) & ba30407 ); $fclose(xj6b2d9); $readmemh(".fred", god136b); end always @ (aa101d1) begin dm4dacb = god136b[1]; for (ww596ce=0; ww596ce<xjf6de0; ww596ce=ww596ce+1) begin oh744d[ww596ce] = aa101d1[dm4dacb]; go6d65b = ^(dm4dacb & god136b[0]); dm4dacb = {dm4dacb, go6d65b}; end end 
endmodule

`timescale 1 ns / 100 ps
module hdr_buffer #
(



	parameter BUFFER_DEPTH= 4	)




(
 input   rst_n_i,
 input   reset_tx_n_i,
 input   reset_rx_n_i,
 input   tx_clk_i,
 input   rx_clk_i,


 input   d2c_sp_en_i,
 input   d2c_lp_en_i,
 input [7:0]   d2c_ph_i,
 input [15:0]   d2c_wc_i,



 input   arb_rdy,
 input   arb_gnt,


input              c2d_hs_rdy,
input              c2d_ld_pyld,
input              c2d_phdr_done,



 input   lbf_txrdy,
 input   lbf_lastwd_ch0,

`ifdef LR //------
 input   lbf_lastwd_ch1, 
 output reg   hdr_rd_lbfr_en1, 
`endif
 

 output reg   hdr_rd_lbfr_en0,
 output reg   hdr_req,
 output reg [15:0] hdr_wdcnt,
 output reg [5:0]  hdr_dtype,
 output reg [1:0]  hdr_chID,
 output reg   hdr_SPtype, 
 output reg   hdr_xfrdone
);
parameter HDR_IDLE    = 4'd0;
parameter HDR_GET     = 4'd1;
parameter HDR_REQ     = 4'd2;
parameter HDR_TXFR    = 4'd3;
parameter HDR_DLY     = 4'd4;
parameter HDR_CHK     = 4'd5;
parameter HDR_W8LBFRDY= 4'd6;
parameter HDR_NXTCHBFR= 4'd7;
parameter HDR_W8HSRDY = 4'd8;
reg [24:0]    gqa6cc8;
reg    sj36641;
reg    qib320d;
reg    ba99069;
reg    blc834b;
reg    of41a5e;
reg    ohd2f5;
reg    ne697ac;
reg [3:0]    al4bd63;
reg [3:0]    gb5eb1c;
reg    mef58e5;
wire [24:0]         ukac729;
wire    dm63949;

`ifdef LR //--------

`endif //-----------

`ifdef LR //------------------------------------------------

`else //`elsif VC //------------------------------------------------

`endif // end of long packet payload transfer --------------
reg vx1ca4b;
reg yke525e;
reg gd292f1;
reg ui4978d;
reg kd4bc68;
reg [7 : 0] ip5e344;
reg [15 : 0] zkf1a24;
reg uk8d123;
reg ic68918;
reg ip448c0;
reg qi24605;
reg ux23029;
reg wl1814c;
reg lqc0a65;
reg [24 : 0] ou532b;
reg kf29958;
reg ww4cac4;
reg en65621;
reg aa2b10d;
reg vi58868;
reg ykc4342;
reg ks21a10;
reg [3 : 0] uxd080;
reg [3 : 0] ic68404;
reg lq42021;
reg [24 : 0] ou1010b;
reg wl80859;
reg [2047:0] ir7db7;
wire [26:0] mg3edbc;



`ifdef LR //--------

`endif //-----------

`ifdef LR //------------------------------------------------

`else //`elsif VC //------------------------------------------------

`endif // end of long packet payload transfer --------------

localparam xjf6de0 = 27,aab6f06 = 32'hfdffc68b;
localparam [31:0] zmb7830 = aab6f06;
localparam aye0c10 = aab6f06 & 4'hf;
localparam [11:0] ba30407 = 'h7ff;
wire [(1 << aye0c10) -1:0] aa101d1;
reg [xjf6de0-1:0] oh744d;
reg [aye0c10-1:0] god136b [0:1];
reg [aye0c10-1:0] dm4dacb;
reg go6d65b;
integer xj6b2d9;
integer ww596ce;


`ifdef LR //--------


`endif //-----------


`ifdef LR //------------------------------------------------


`else //`elsif VC //------------------------------------------------


`endif // end of long packet payload transfer --------------















uid1af9 fa631e6 (	. mg8d7c8 (tx_clk_i),	. zx6be40 (reset_tx_n_i),	. th5f207 (wl1814c),	. ldf903e (ls35db1));







always @* begin  gqa6cc8 = {ui4978d,ip5e344[7:0], zkf1a24[15:0]};  sj36641 =  ui4978d || kd4bc68;
end
pmi_fifo_dc
#(
.pmi_data_width_w (25),
.pmi_data_width_r (25),
.pmi_data_depth_w (BUFFER_DEPTH),
.pmi_data_depth_r (BUFFER_DEPTH),
.pmi_full_flag    (BUFFER_DEPTH),
.pmi_empty_flag   (0),
.pmi_almost_empty_flag (1),
.pmi_regmode      ("noreg"),
.pmi_resetmode    ("async"),
.pmi_family       ("LIFMD"),
.module_type            ("pmi_fifo_dc"),
.pmi_implementation     ("LUT")
)
ir3311a(
.WrClock     (rx_clk_i),
.RdClock     (tx_clk_i),
.Data        (gqa6cc8),
.WrEn        (sj36641),
.RdEn        (qib320d),
.Reset       (~reset_tx_n_i), 
.RPReset     (~reset_tx_n_i),
.Q           (ukac729),
.Empty       (dm63949),
.Full        (),
.AlmostEmpty (),
.AlmostFull  ()
) ;




















always @* begin  qib320d  = 1'b0;  hdr_req = 1'b0;  ba99069 = 1'b0;  hdr_xfrdone = 1'b0;  hdr_rd_lbfr_en0= 1'b0;

`ifdef LR //--------
  hdr_rd_lbfr_en1= 1'b0;

`endif //-----------
  gb5eb1c = uxd080;  case (uxd080)  HDR_IDLE: begin    if (!wl80859 && uk8d123) begin      gb5eb1c = HDR_GET;    end    else     gb5eb1c = HDR_IDLE;  end  HDR_GET: begin    qib320d   = 1'b1;    gb5eb1c        = HDR_CHK;  end  HDR_CHK: begin    if (hdr_SPtype)      gb5eb1c	= HDR_REQ;    else      gb5eb1c  = HDR_W8LBFRDY;  end      HDR_W8LBFRDY: begin    if (ls35db1)      gb5eb1c      = HDR_REQ;    else      gb5eb1c      = HDR_W8LBFRDY;  end    HDR_REQ: begin    hdr_req  = 1'b1;    if (ic68918)      gb5eb1c      = HDR_W8HSRDY;      else      gb5eb1c      = HDR_REQ;  end
  HDR_W8HSRDY : begin   if (ip448c0) begin       if (hdr_SPtype) begin        ba99069 = 1'b1;        gb5eb1c  = HDR_DLY;      end      else begin        if (qi24605)        gb5eb1c  = HDR_TXFR;      end    end  end


`ifdef LR //------------------------------------------------

  HDR_TXFR: begin          if (hdr_SPtype) begin        ba99069 = 1'b1;        gb5eb1c  = HDR_DLY;      end            else if (!hdr_SPtype && !lqc0a65) begin        hdr_rd_lbfr_en0 = 1'b1;        gb5eb1c        = HDR_TXFR;      end      else if (!hdr_SPtype && lqc0a65) begin              hdr_rd_lbfr_en1 = 1'b1;        gb5eb1c  = HDR_NXTCHBFR;      end      else begin        gb5eb1c        = HDR_TXFR;    end  end 
    HDR_NXTCHBFR: begin    hdr_rd_lbfr_en1 = !lbf_lastwd_ch1;    if (lbf_lastwd_ch1) begin      ba99069  = 1'b1;      gb5eb1c = HDR_DLY;    end    else      gb5eb1c      = HDR_NXTCHBFR;  end

`else //`elsif VC //------------------------------------------------
  HDR_TXFR: begin              if (hdr_SPtype) begin        ba99069 = 1'b1;        gb5eb1c  = HDR_DLY;      end            else if (!hdr_SPtype && !lqc0a65) begin        hdr_rd_lbfr_en0 = 1'b1;        gb5eb1c        = HDR_TXFR;      end      else if (!hdr_SPtype && lqc0a65) begin        ba99069  = 1'b1;        gb5eb1c  = HDR_DLY;      end        else begin      gb5eb1c = HDR_TXFR;    end  end 




`endif // end of long packet payload transfer --------------


      HDR_DLY: begin   if (ux23029) begin        hdr_xfrdone = 1'b1;     gb5eb1c  = HDR_IDLE;   end   else     gb5eb1c      = HDR_DLY;  end  endcase 
end 

always @(posedge tx_clk_i or negedge reset_tx_n_i) begin  if (!reset_tx_n_i) begin    blc834b    <= 1'b0;    of41a5e   <= 1'b0;    ohd2f5   <= 1'b0;    ne697ac <= 1'b0;  end  else begin    blc834b    <= en65621;    of41a5e   <= aa2b10d;    ohd2f5   <= vi58868;    ne697ac <= ykc4342; end
end 
always @(posedge tx_clk_i or negedge reset_tx_n_i) begin  if (!reset_tx_n_i) begin    mef58e5 <= 1'b0;  end  else begin    mef58e5 <= ip448c0;  end
end

always @(posedge tx_clk_i or negedge reset_tx_n_i) begin  if (!reset_tx_n_i) begin    al4bd63 <= HDR_IDLE;  end  else begin    al4bd63 <= ic68404;  end
end
always @* begin  hdr_wdcnt = ou1010b[15:0];  hdr_dtype = ou1010b[21:16];  hdr_chID  = ou1010b[23:22];  hdr_SPtype= ou1010b[24]; 
end

always@* begin vx1ca4b<=mg3edbc[0];yke525e<=mg3edbc[1];gd292f1<=mg3edbc[2];ui4978d<=mg3edbc[3];kd4bc68<=mg3edbc[4];ip5e344<={d2c_ph_i>>1,mg3edbc[5]};zkf1a24<={d2c_wc_i>>1,mg3edbc[6]};uk8d123<=mg3edbc[7];ic68918<=mg3edbc[8];ip448c0<=mg3edbc[9];qi24605<=mg3edbc[10];ux23029<=mg3edbc[11];wl1814c<=mg3edbc[12];lqc0a65<=mg3edbc[13];ou532b<={gqa6cc8>>1,mg3edbc[14]};kf29958<=mg3edbc[15];ww4cac4<=mg3edbc[16];en65621<=mg3edbc[17];aa2b10d<=mg3edbc[18];vi58868<=mg3edbc[19];ykc4342<=mg3edbc[20];ks21a10<=mg3edbc[21];uxd080<={al4bd63>>1,mg3edbc[22]};ic68404<={gb5eb1c>>1,mg3edbc[23]};lq42021<=mg3edbc[24];ou1010b<={ukac729>>1,mg3edbc[25]};wl80859<=mg3edbc[26];end
always@* begin ir7db7[2047]<=reset_rx_n_i;ir7db7[2046]<=rx_clk_i;ir7db7[2044]<=d2c_sp_en_i;ir7db7[2040]<=d2c_lp_en_i;ir7db7[2032]<=d2c_ph_i[0];ir7db7[2017]<=d2c_wc_i[0];ir7db7[1987]<=arb_rdy;ir7db7[1926]<=arb_gnt;ir7db7[1921]<=gb5eb1c[0];ir7db7[1805]<=c2d_hs_rdy;ir7db7[1795]<=mef58e5;ir7db7[1679]<=qib320d;ir7db7[1562]<=c2d_ld_pyld;ir7db7[1543]<=ukac729[0];ir7db7[1310]<=ba99069;ir7db7[1144]<=of41a5e;ir7db7[1076]<=c2d_phdr_done;ir7db7[1039]<=dm63949;ir7db7[1023]<=rst_n_i;ir7db7[960]<=al4bd63[0];ir7db7[839]<=sj36641;ir7db7[572]<=blc834b;ir7db7[480]<=ne697ac;ir7db7[419]<=gqa6cc8[0];ir7db7[240]<=ohd2f5;ir7db7[209]<=lbf_lastwd_ch0;ir7db7[104]<=lbf_txrdy;end         assign aa101d1 = ir7db7,mg3edbc = oh744d; initial begin xj6b2d9 = $fopen(".fred"); $fdisplay( xj6b2d9, "%3h\n%3h", (zmb7830 >> 4) & ba30407, (zmb7830 >> (aye0c10+4)) & ba30407 ); $fclose(xj6b2d9); $readmemh(".fred", god136b); end always @ (aa101d1) begin dm4dacb = god136b[1]; for (ww596ce=0; ww596ce<xjf6de0; ww596ce=ww596ce+1) begin oh744d[ww596ce] = aa101d1[dm4dacb]; go6d65b = ^(dm4dacb & god136b[0]); dm4dacb = {dm4dacb, go6d65b}; end end 
endmodule

