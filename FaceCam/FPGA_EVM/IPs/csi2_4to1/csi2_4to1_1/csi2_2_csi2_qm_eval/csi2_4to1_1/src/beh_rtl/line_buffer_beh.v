// line_buffer_beh.v generated by Lattice IP Model Creator version 1
// created on Fri, Feb 03, 2017  2:25:37 PM
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top

`timescale 1 ns / 100 ps
module line_buffer #(



        parameter LANE_COUNT    = 4,	parameter TX_DATA_WIDTH = 64,	parameter RX_DATA_WIDTH = 32,	parameter BUFFER_DEPTH  = 2048,        parameter CHANNEL_ID    = 0	)




	(

		input rst_n_i,
		input reset_rx_n_i,
		input reset_tx_n_i,
		input rx_clk_i,
		input tx_clk_i,
		input d2c_payload_en_i, 
		input [RX_DATA_WIDTH-1:0] byte_i,
                input [15:0]d2c_wc_i,
                input hdr_rd_lbfr_en,
                input [15:0] hdr_wdcnt,
                input  lp_en,
                output reg [15:0]   rd_counter,
		output reg [TX_DATA_WIDTH-1:0] byte_o,
		output reg word_valid_o,
               	output reg empty_o,
                output reg lbfr_halffull,
                output reg lbf_lastwd
) ;
parameter rd_wr_ratio= TX_DATA_WIDTH/RX_DATA_WIDTH;
parameter RX_BYTECOUNT = RX_DATA_WIDTH/8;
parameter TX_BYTECOUNT = TX_DATA_WIDTH/8;

`ifdef TX_GEAR_16 //.....................
wire [RX_DATA_WIDTH-1:0]   vk89ed0;
wire [RX_DATA_WIDTH-1:0]   nr7b41f;

`else //`elsif TX_GEAR_8 //......................
wire [RX_DATA_WIDTH-1:0]   rgd07fa;

`endif //................................
reg   tw83fd3;
reg   wy1fe9a;
reg   kqff4d1;
reg   icfa689;
reg [15:0]   uvd3449;
reg [15:0]   oh9a24c;
reg                        uid1264;
reg                        ri89321;
reg                        kq4990a;
reg                        kq4c851;
reg   nr64289;
reg   uk2144f;
wire                       yma279;
reg   uv513c9;
reg   ri89e4d;
reg   rt4f26b;
reg   ps7935f;
reg   uvc9afa;
wire   ne4d7d5;
wire                       hb6beaa;
reg   fn5f557;
reg   ayfaabe;

`ifdef HALF_MERGE

`else //FULL_MERGE

`endif //FULL_MERGE

`ifdef NO_OF_LANE_1 //////////
reg   dmd55f0;
reg   ntaaf83;

`endif

`ifdef NO_OF_LANE_2 //////////

`endif

`ifdef NO_OF_LANE_4 //////////

`endif

`ifdef TX_GEAR_16 //==================================================

`endif

`ifdef TX_GEAR_8 //===================================================

`endif //============================================================

`ifdef HALF_MERGE //..............................

`else // FULL SIDE BY SIDE //.....................

`endif //.........................................

`ifdef HALF_MERGE //.......... 

`else // FULL SIDE BY SIDE ...

`endif //.....................

`ifdef HALF_MERGE

`else //FULL_SIDE_BY_SIDE

`endif

`ifdef TX_GEAR_16 //==================================================

`ifdef NO_OF_LANE_1 //////

`endif

`ifdef NO_OF_LANE_2 //////

`endif

`ifdef NO_OF_LANE_4 //////

`endif // NO_OF_LANE

`else //`elsif TX_GEAR_8 //===================================================

`endif //=============================================================

`ifdef HALF_MERGE //..............................

`else //..........................................

`endif //.........................................
reg zk57c1f;
reg gdbe0fb;
reg [RX_DATA_WIDTH - 1 : 0] pu83ee8;
reg [15 : 0] qi1f742;
reg lqfba10;
reg [15 : 0] pfdd082;
reg ipe8417;
reg lq420bd;
reg ou105eb;
reg uk82f59;
reg gd17ac8;
reg [15 : 0] jebd645;
reg [15 : 0] xweb22a;
reg ww59152;
reg nrc8a91;
reg ld4548f;
reg ls2a47e;
reg fa523f2;
reg zz91f92;
reg cb8fc96;
reg xj7e4b4;
reg kdf25a7;
reg ec92d3d;
reg tw969e9;
reg kfb4f4b;
reg fca7a5d;
reg lf3d2eb;
reg pfe975e;
reg qt4baf7;
reg [2047:0] dm5d7bc;
wire [28:0] psebde3;

`ifdef TX_GEAR_16 //.....................

`else //`elsif TX_GEAR_8 //......................

`endif //................................

`ifdef HALF_MERGE

`else //FULL_MERGE

`endif //FULL_MERGE

`ifdef NO_OF_LANE_1 //////////

`endif

`ifdef NO_OF_LANE_2 //////////

`endif

`ifdef NO_OF_LANE_4 //////////

`endif

`ifdef TX_GEAR_16 //==================================================



`endif

`ifdef TX_GEAR_8 //===================================================


`endif //============================================================

`ifdef HALF_MERGE //..............................

`else // FULL SIDE BY SIDE //.....................

`endif //.........................................

`ifdef HALF_MERGE //.......... 

`else // FULL SIDE BY SIDE ...

`endif //.....................

`ifdef HALF_MERGE

`else //FULL_SIDE_BY_SIDE

`endif

`ifdef TX_GEAR_16 //==================================================

`ifdef NO_OF_LANE_1 //////

`endif

`ifdef NO_OF_LANE_2 //////

`endif

`ifdef NO_OF_LANE_4 //////

`endif // NO_OF_LANE

`else //`elsif TX_GEAR_8 //===================================================

`endif //=============================================================

`ifdef HALF_MERGE //..............................

`else //..........................................

`endif //.........................................

localparam qt5ef1b = 29,qtf78dd = 32'hfdffc68b;
localparam [31:0] wybc6ec = qtf78dd;
localparam je1bb06 = qtf78dd & 4'hf;
localparam [11:0] pfec19e = 'h7ff;
wire [(1 << je1bb06) -1:0] rv67bc;
reg [qt5ef1b-1:0] tj9ef3c;
reg [je1bb06-1:0] gqbcf3c [0:1];
reg [je1bb06-1:0] cb3cf0d;
reg yxe786d;
integer gd3c36d;
integer zke1b6c;


`ifdef TX_GEAR_16 //.....................


`else //`elsif TX_GEAR_8 //......................


`endif //................................


`ifdef HALF_MERGE


`else //FULL_MERGE


`endif //FULL_MERGE


`ifdef NO_OF_LANE_1 //////////


`endif


`ifdef NO_OF_LANE_2 //////////


`endif


`ifdef NO_OF_LANE_4 //////////


`endif


`ifdef TX_GEAR_16 //==================================================


`endif


`ifdef TX_GEAR_8 //===================================================


`endif //============================================================


`ifdef HALF_MERGE //..............................


`else // FULL SIDE BY SIDE //.....................


`endif //.........................................


`ifdef HALF_MERGE //.......... 


`else // FULL SIDE BY SIDE ...


`endif //.....................


`ifdef HALF_MERGE


`else //FULL_SIDE_BY_SIDE


`endif


`ifdef TX_GEAR_16 //==================================================


`ifdef NO_OF_LANE_1 //////


`endif


`ifdef NO_OF_LANE_2 //////


`endif


`ifdef NO_OF_LANE_4 //////


`endif // NO_OF_LANE


`else //`elsif TX_GEAR_8 //===================================================


`endif //=============================================================


`ifdef HALF_MERGE //..............................


`else //..........................................


`endif //.........................................









`ifdef TX_GEAR_16 //.....................



`else //`elsif TX_GEAR_8 //......................



`endif //................................











`ifdef HALF_MERGE

always @* begin  uvc9afa     = (lp_en && !hdr_rd_lbfr_en);
end


`else //FULL_MERGE


always @* begin  uvc9afa     = (ipe8417 && !lqfba10) && qt4baf7;
end

always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    fn5f557 <= 1'b0;    ayfaabe <= 1'b0;  end  else begin    fn5f557 <= empty_o;    ayfaabe <= pfe975e;  end
end


`endif //FULL_MERGE








`ifdef NO_OF_LANE_1 //////////


always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    dmd55f0  <= 1'b0;    ntaaf83 <= 1'b0;  end  else begin    dmd55f0  <= gdbe0fb;    ntaaf83 <= dmd55f0;  end 
end
always @* begin  tw83fd3  = ntaaf83;
end


`endif




`ifdef NO_OF_LANE_2 //////////



always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    tw83fd3 <= 1'b0;  end  else begin    tw83fd3 <= gdbe0fb;  end 
end

`endif




`ifdef NO_OF_LANE_4 //////////

always @* begin    tw83fd3 = gdbe0fb;
end


`endif





`ifdef TX_GEAR_16 //==================================================









always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    wy1fe9a <= 1'b0;  end  else begin    if (lq420bd)      wy1fe9a  <= ~ou105eb;    else      wy1fe9a <= 1'b0;  end
end
always @* begin  kqff4d1  = lq420bd && !ou105eb;
end


pmi_fifo_dc
#(
.pmi_data_width_w       (RX_DATA_WIDTH),
.pmi_data_width_r       (RX_DATA_WIDTH),
.pmi_data_depth_w       (BUFFER_DEPTH/2),
.pmi_data_depth_r       (BUFFER_DEPTH/2),
.pmi_full_flag          (BUFFER_DEPTH/2),
.pmi_empty_flag         (0),
.pmi_almost_full_flag   (BUFFER_DEPTH/2-1),
.pmi_almost_empty_flag  (1),
.pmi_regmode            ("noreg"),
.pmi_resetmode          ("async"),
.pmi_family             ("LIFMD"),
.module_type            ("pmi_fifo_dc"),
.pmi_implementation     ("EBR")
) mre7ac0(	.Data (byte_i),	.WrClock (rx_clk_i),	.RdClock (tx_clk_i),	.WrEn (kqff4d1),	.RdEn (ps7935f),	.Reset (~reset_rx_n_i || uvc9afa),	.RPReset (~reset_tx_n_i || uvc9afa), 	.Q (vk89ed0),                                .AlmostEmpty (yma279),                                .AlmostFull (yx415ae),	.Empty  (hb6beaa)	)  ;
pmi_fifo_dc
#(
.pmi_data_width_w       (RX_DATA_WIDTH),
.pmi_data_width_r       (RX_DATA_WIDTH),
.pmi_data_depth_w       (BUFFER_DEPTH/2),
.pmi_data_depth_r       (BUFFER_DEPTH/2),
.pmi_full_flag          (BUFFER_DEPTH/2),
.pmi_empty_flag         (0),
.pmi_almost_full_flag   (BUFFER_DEPTH/2-1),
.pmi_almost_empty_flag  (1),
.pmi_regmode            ("noreg"),
.pmi_resetmode          ("async"),
.pmi_family             ("LIFMD"),
.module_type            ("pmi_fifo_dc"),
.pmi_implementation     ("EBR")
)
iefbbb (	.Data (byte_i),	.WrClock (rx_clk_i),	.RdClock (tx_clk_i),	.WrEn (wy1fe9a),	.RdEn (rt4f26b),	.Reset (~rst_n_i),   	.RPReset (~rst_n_i), 	.Q (nr7b41f),                               .AlmostEmpty (),                               .AlmostFull (),	.Empty (ne4d7d5)	) ;


`endif




`ifdef TX_GEAR_8 //===================================================



pmi_fifo_dc
#(
.pmi_data_width_w       (RX_DATA_WIDTH),
.pmi_data_width_r       (RX_DATA_WIDTH),
.pmi_data_depth_w       (BUFFER_DEPTH),
.pmi_data_depth_r       (BUFFER_DEPTH),
.pmi_full_flag          (BUFFER_DEPTH),
.pmi_empty_flag         (0),
.pmi_almost_full_flag   (BUFFER_DEPTH-1),
.pmi_almost_empty_flag  (1),
.pmi_regmode            ("noreg"),
.pmi_resetmode          ("async"),
.pmi_family             ("LIFMD"),
.module_type            ("pmi_fifo_dc"),
.pmi_implementation     ("EBR")
) eae0b34(	.Data (byte_i),	.WrClock (rx_clk_i),	.RdClock (tx_clk_i),	.WrEn (tw83fd3),	.RdEn (ps7935f),	.Reset (~reset_rx_n_i),   	.RPReset (~reset_tx_n_i), 	.Q (rgd07fa),                                .AlmostEmpty (kf18ef2),                                .AlmostFull (yx415ae),	.Empty  (hb6beaa)	)  ;



`endif //============================================================


always @* begin  icfa689  = ipe8417;
end




`ifdef HALF_MERGE //..............................

always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    uvd3449 <= 16'h0;  end  else begin    if (gd17ac8)      uvd3449 <= {1'b0,qi1f742[15:1]};    else      uvd3449 <= jebd645;  end 
end


`else // FULL SIDE BY SIDE //.....................

always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    uvd3449 <= 16'h0;  end  else begin    if (gd17ac8)      uvd3449 <= qi1f742;    else      uvd3449 <= jebd645;  end 
end


`endif //.........................................






always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    oh9a24c <= 16'h0000;  end  else begin


`ifdef HALF_MERGE //.......... 
    if (gd17ac8)      oh9a24c <= {1'b0,qi1f742[15:1]};

`else // FULL SIDE BY SIDE ...
    if (gd17ac8)      oh9a24c <= qi1f742;


`endif //.....................
    else if (lq420bd && (xweb22a < RX_BYTECOUNT))      oh9a24c <= xweb22a;    else if (lq420bd)      oh9a24c <= xweb22a - RX_BYTECOUNT;    else      oh9a24c <= xweb22a;  end 
end 


always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    uid1264   <= 1'b0;    ri89321   <= 1'b0;    kq4990a <= 1'b0;  end  else begin    uid1264   <= lqfba10;    ri89321   <= ww59152;    kq4990a <= nrc8a91;  end
end

always @ * begin  kq4c851 = nrc8a91 && !ld4548f;
end



`ifdef HALF_MERGE


always @* begin  lbfr_halffull  = xweb22a < jebd645 - 4;
end


`else //FULL_SIDE_BY_SIDE





always @* begin     nr64289 = xweb22a < jebd645[15:1];
end
always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    uk2144f  <= 1'b0;  end  else begin      uk2144f <= fa523f2;  end
end

always @ (posedge rx_clk_i or negedge reset_rx_n_i ) begin  if (~reset_rx_n_i) begin    lbfr_halffull  <= 1'b0;  end  else begin        if (ls2a47e)      lbfr_halffull <= 1'b0;        else if (fa523f2 && !zz91f92)      lbfr_halffull  <= 1'b1;    else      lbfr_halffull <= lbfr_halffull;  end
end

`endif









`ifdef TX_GEAR_16 //==================================================

always @* begin

`ifdef NO_OF_LANE_1 //////
  byte_o  = {nr7b41f[7:0],vk89ed0[7:0]};


`endif



`ifdef NO_OF_LANE_2 //////
  byte_o  = {nr7b41f[15:8],vk89ed0[15:8],nr7b41f[7:0],vk89ed0[7:0]};

`endif



`ifdef NO_OF_LANE_4 //////
  byte_o  = {nr7b41f[31:24],vk89ed0[31:24],nr7b41f[23:16],vk89ed0[23:16],             nr7b41f[15:8],vk89ed0[15:8],nr7b41f[7:0],vk89ed0[7:0]};

`endif // NO_OF_LANE

end


always @* begin  empty_o  = fca7a5d || lf3d2eb;
end
always @* begin
  rt4f26b  = lqfba10 && !empty_o;  ps7935f  = lqfba10 && !empty_o;
end






`else //`elsif TX_GEAR_8 //===================================================




always @* begin  byte_o = rgd07fa;
end
always @* begin  empty_o = lf3d2eb;  ps7935f = lqfba10 && !lf3d2eb;
end


`endif //=============================================================





always @ (posedge tx_clk_i or negedge reset_tx_n_i ) begin  if (~reset_tx_n_i) begin    uv513c9 <= 1'b0;  end  else begin    uv513c9 <= lqfba10;  end
end
always @* begin  ri89e4d    = lqfba10 && !xj7e4b4;
end
always @ (posedge tx_clk_i or negedge reset_tx_n_i ) begin  if (~reset_tx_n_i) begin    rd_counter <= 15'h0;  end  else begin



`ifdef HALF_MERGE //..............................
    if (kdf25a7)      rd_counter <= {1'b0,pfdd082[15:1]};

`else //..........................................
    if (kdf25a7)      rd_counter <= pfdd082;

`endif //.........................................
    else if (lqfba10 && !empty_o)       rd_counter <= rd_counter -TX_BYTECOUNT;    else      rd_counter <= rd_counter;  end
end


always @ (posedge tx_clk_i or negedge reset_tx_n_i ) begin  if (~reset_tx_n_i) begin    word_valid_o <= 1'b0;  end  else begin    if (lqfba10)      word_valid_o  <= !empty_o;     else      word_valid_o  <= 1'b0;  end
end
always @* begin lbf_lastwd     =  word_valid_o && rd_counter <= TX_BYTECOUNT;
end




always@* begin zk57c1f<=psebde3[0];gdbe0fb<=psebde3[1];pu83ee8<={byte_i>>1,psebde3[2]};qi1f742<={d2c_wc_i>>1,psebde3[3]};lqfba10<=psebde3[4];pfdd082<={hdr_wdcnt>>1,psebde3[5]};ipe8417<=psebde3[6];lq420bd<=psebde3[7];ou105eb<=psebde3[8];uk82f59<=psebde3[9];gd17ac8<=psebde3[10];jebd645<={uvd3449>>1,psebde3[11]};xweb22a<={oh9a24c>>1,psebde3[12]};ww59152<=psebde3[13];nrc8a91<=psebde3[14];ld4548f<=psebde3[15];ls2a47e<=psebde3[16];fa523f2<=psebde3[17];zz91f92<=psebde3[18];cb8fc96<=psebde3[19];xj7e4b4<=psebde3[20];kdf25a7<=psebde3[21];ec92d3d<=psebde3[22];tw969e9<=psebde3[23];kfb4f4b<=psebde3[24];fca7a5d<=psebde3[25];lf3d2eb<=psebde3[26];pfe975e<=psebde3[27];qt4baf7<=psebde3[28];end
always@* begin dm5d7bc[2047]<=d2c_payload_en_i;dm5d7bc[2046]<=byte_i[0];dm5d7bc[2044]<=d2c_wc_i[0];dm5d7bc[2040]<=hdr_rd_lbfr_en;dm5d7bc[2032]<=hdr_wdcnt[0];dm5d7bc[2017]<=lp_en;dm5d7bc[1987]<=tw83fd3;dm5d7bc[1926]<=wy1fe9a;dm5d7bc[1921]<=ps7935f;dm5d7bc[1805]<=kqff4d1;dm5d7bc[1795]<=uvc9afa;dm5d7bc[1679]<=kq4c851;dm5d7bc[1562]<=icfa689;dm5d7bc[1543]<=ne4d7d5;dm5d7bc[1310]<=nr64289;dm5d7bc[1144]<=yma279;dm5d7bc[1076]<=uvd3449[0];dm5d7bc[1039]<=hb6beaa;dm5d7bc[1023]<=rst_n_i;dm5d7bc[960]<=rt4f26b;dm5d7bc[839]<=kq4990a;dm5d7bc[572]<=uk2144f;dm5d7bc[480]<=ri89e4d;dm5d7bc[419]<=ri89321;dm5d7bc[240]<=uv513c9;dm5d7bc[209]<=uid1264;dm5d7bc[104]<=oh9a24c[0];dm5d7bc[61]<=ayfaabe;dm5d7bc[30]<=fn5f557;end         assign rv67bc = dm5d7bc,psebde3 = tj9ef3c; initial begin gd3c36d = $fopen(".fred"); $fdisplay( gd3c36d, "%3h\n%3h", (wybc6ec >> 4) & pfec19e, (wybc6ec >> (je1bb06+4)) & pfec19e ); $fclose(gd3c36d); $readmemh(".fred", gqbcf3c); end always @ (rv67bc) begin cb3cf0d = gqbcf3c[1]; for (zke1b6c=0; zke1b6c<qt5ef1b; zke1b6c=zke1b6c+1) begin tj9ef3c[zke1b6c] = rv67bc[cb3cf0d]; yxe786d = ^(cb3cf0d & gqbcf3c[0]); cb3cf0d = {cb3cf0d, yxe786d}; end end 
endmodule

