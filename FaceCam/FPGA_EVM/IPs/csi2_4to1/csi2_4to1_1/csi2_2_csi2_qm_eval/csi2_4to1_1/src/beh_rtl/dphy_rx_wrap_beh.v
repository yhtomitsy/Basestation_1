// dphy_rx_wrap_beh.v generated by Lattice IP Model Creator version 1
// created on Wed, Jan 10, 2018  4:27:57 PM
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top
















































`timescale 1 ns / 100 ps
module ymb9d0e #(	
    parameter RX_GEAR =  16,        parameter NUM_RX_LANE = 4,      parameter BYTECLK_MHZ = 111 
)
(
    input wire                reset_n_i,
    input wire                dz711a3,       
    input wire                wy88d1e,	        
    input wire                cm468f1,	        
    input wire                qi34788,	        
    input wire                wya3c40,	        
    input wire [RX_GEAR-1:0]  dmf100a,            
    input wire [RX_GEAR-1:0]  bl40290,            
    input wire [RX_GEAR-1:0]  uka432,            
    input wire [RX_GEAR-1:0]  kf90c8a,            
    output wire [RX_GEAR-1:0] bd0_o,            
    output wire [RX_GEAR-1:0] bd1_o,            
    output wire [RX_GEAR-1:0] bd2_o,            
    output wire [RX_GEAR-1:0] bd3_o,            
    output reg                hbfca48,    
    output wire               kqe5247,  
    output wire               yz29239,  
    output wire               ic491cd,  
    output wire               rg48e68,  
    output wire               hs_sync_o         
);
reg                 wl39a1b;
reg                 dzcd0dd;
reg                 cm686ee;
reg                 os43771;
reg [RX_GEAR-1:0]   thddc4b, jcee25e, rt712f2, fc89796,                    uv4bcb2, kd5e594, qtf2ca4, xy96524;
reg [RX_GEAR-1:0]   lf94912, uxa4896, uk244b4, bn225a1,                    an12d0e, ng96875, ohb43ab, ira1d5c;
reg [RX_GEAR-1:0]   en75722, gdab914, ui5c8a5, rge4528,                    db22943, tw14a1f, hda50fa, bn287d7;
reg [RX_GEAR-1:0]   wy1f5f8, gofafc0, bld7e00, xlbf007,                    kdf803f, fac01fc, oufe2, oh7f11;
reg [RX_GEAR-1:0]   zxfc462, wje2316, ls118b4, tw8c5a2,                    ay62d12, xl16891, qvb448f, xya247c;
reg [RX_GEAR-1:0]   ph91f14, an8f8a6, fa7c534, she29a2,                    je14d15, coa68aa, ks34551, baa2a88;
reg [RX_GEAR-1:0]   fpaa219, kd510ce, ou88675, me433a8,                    zz19d41, eacea0e, mr75070, ria8384;
reg [RX_GEAR-1:0]   bae11d, sh708eb, tj8475d, yz23aee,                    gd1d775, neebbad, zk5dd6b, faeeb5a;
reg [RX_GEAR-1:0]   lsad69d, ld6b4eb, hb5a75e;
reg [RX_GEAR-1:0]   aa9d7b5, rgebda9, gb5ed4b;
reg [RX_GEAR-1:0]   rvb52ee, eca9776, gb4bbb1;
reg [RX_GEAR-1:0]   vieec62, lq76313, ohb189b;
reg [RX_GEAR/8+1:0] os626ea;
reg [RX_GEAR/8+1:0] tj9ba86;
reg [RX_GEAR/8+1:0] goea1bf;
reg [RX_GEAR/8+1:0] fc86fc6;
reg                 rv37e32, hdbf196;
reg                 mrf8cb7;
reg                 alc65bd;
reg                 hd32ded;
reg                 do96f6e, lsb7b73, jebdb9a, czedcd3;
reg  [3:0]          nr6e69c, vi734e6, qv9a733, mrd399c;
wire [RX_GEAR-1:0]  dze672a, qv33956, xy9cab4, ose55a2,                    do2ad11, ww5688b, irb4459, lsa22cc;
wire [RX_GEAR-1:0]  xl8b313, kq5989f, qtcc4f8, cm627c4,                    jr13e20, ir9f107, alf883c, goc41e5;
wire [RX_GEAR-1:0]  ux7942, gd3ca14, cme50a5, nt28529,                    zk4294f, tw14a7a, hda53d2, an29e97;
wire [RX_GEAR-1:0]  mr7a5e7, bld2f3d, uk979ef, qibcf79,                    gbe7bc9, tj3de4d, cmef26f, lq79378;
wire [RX_GEAR-1:0]  rg4de15, qt6f0ab, su7855c, thc2ae0,                    wy15706, irab831, kq5c18d, sue0c69;
wire [RX_GEAR-1:0]  ie31a47, ou8d239, ne691c8, zk48e43,                    by4721b, oh390db, nrc86dc, ea436e6;
wire [RX_GEAR-1:0]  wwdb98a, mrdcc51, hbe628c, uk31466,                    ep8a330, qt51985, hq8cc2c, ne66163;
wire [RX_GEAR-1:0]  kf858d3, ir2c69d, lq634ed, aa1a76a,                    ofd3b50, uk9da85, shed428, of6a145;
wire                fn50a2c, yz85166, nt28b34, xj459a6;
localparam  ir2cd37   = 1000000/BYTECLK_MHZ;
localparam  ym34de3          = 6*(ir2cd37/RX_GEAR);
localparam  oubc64e   = (85000+ym34de3)/ir2cd37 < 2 ? 1 : (((85000+ym34de3)/ir2cd37) -1);
localparam  yx70ded       = (RX_GEAR==8) ? 8'hB8 : 16'hB8;
reg db37b6a;
reg xybdb56;
reg kdedab3;
reg ww6d59c;
reg [RX_GEAR - 1 : 0] cm5670d;
reg [RX_GEAR - 1 : 0] je9c340;
reg [RX_GEAR - 1 : 0] cbd01a;
reg [RX_GEAR - 1 : 0] fn406a1;
reg rv350e;
reg ks1a877;
reg sud43b9;
reg [RX_GEAR - 1 : 0] hqee4c;
reg [RX_GEAR - 1 : 0] oub9311;
reg [RX_GEAR - 1 : 0] ay4c445;
reg [RX_GEAR - 1 : 0] xy11140;
reg [RX_GEAR - 1 : 0] th45019;
reg [RX_GEAR - 1 : 0] th40677;
reg [RX_GEAR - 1 : 0] zz19df7;
reg [RX_GEAR - 1 : 0] kq77df0;
reg [RX_GEAR - 1 : 0] uvf7c04;
reg [RX_GEAR - 1 : 0] mef0125;
reg [RX_GEAR - 1 : 0] tw4945;
reg [RX_GEAR - 1 : 0] ri25158;
reg [RX_GEAR - 1 : 0] vv4561e;
reg [RX_GEAR - 1 : 0] ne587b0;
reg [RX_GEAR - 1 : 0] pu1ec1c;
reg [RX_GEAR - 1 : 0] zzb071f;
reg [RX_GEAR - 1 : 0] jr1c7f2;
reg [RX_GEAR - 1 : 0] uk1fcbf;
reg [RX_GEAR - 1 : 0] uvf2fcb;
reg [RX_GEAR - 1 : 0] fpbf2e1;
reg [RX_GEAR - 1 : 0] eacb87e;
reg [RX_GEAR - 1 : 0] tue1f81;
reg [RX_GEAR - 1 : 0] zx7e050;
reg [RX_GEAR - 1 : 0] lf81438;
reg [RX_GEAR - 1 : 0] nr50e31;
reg [RX_GEAR - 1 : 0] tj38c71;
reg [RX_GEAR - 1 : 0] ks31c7d;
reg [RX_GEAR - 1 : 0] pf71f4f;
reg [RX_GEAR - 1 : 0] ic7d3fc;
reg [RX_GEAR - 1 : 0] dz4ff06;
reg [RX_GEAR - 1 : 0] ldfc1b4;
reg [RX_GEAR - 1 : 0] lf6d30;
reg [RX_GEAR - 1 : 0] sjb4c34;
reg [RX_GEAR - 1 : 0] pu30d28;
reg [RX_GEAR - 1 : 0] wy34a1a;
reg [RX_GEAR - 1 : 0] ph2868f;
reg [RX_GEAR - 1 : 0] mg1a3f9;
reg [RX_GEAR - 1 : 0] qv8fe40;
reg [RX_GEAR - 1 : 0] pff9025;
reg [RX_GEAR - 1 : 0] th40976;
reg [RX_GEAR - 1 : 0] ng25dbb;
reg [RX_GEAR - 1 : 0] xw76ed1;
reg [RX_GEAR - 1 : 0] mtbb453;
reg [RX_GEAR - 1 : 0] ead14ea;
reg [RX_GEAR - 1 : 0] me53a8d;
reg [RX_GEAR - 1 : 0] wwea349;
reg [RX_GEAR - 1 : 0] gq8d244;
reg [RX_GEAR - 1 : 0] go49103;
reg [RX_GEAR - 1 : 0] sh440c3;
reg [RX_GEAR - 1 : 0] nt30e3;
reg [RX_GEAR - 1 : 0] ofc38fd;
reg [RX_GEAR - 1 : 0] dze3f67;
reg [RX_GEAR - 1 : 0] gbfd9f9;
reg [RX_GEAR - 1 : 0] ic67e6e;
reg [RX_GEAR - 1 : 0] nrf9b8b;
reg [RX_GEAR - 1 : 0] fn6e2ff;
reg [RX_GEAR - 1 : 0] lf8bff6;
reg [RX_GEAR - 1 : 0] wwffdb7;
reg [RX_GEAR - 1 : 0] hbf6dc2;
reg [RX_GEAR - 1 : 0] pub70b0;
reg [RX_GEAR - 1 : 0] blc2c1a;
reg [RX_GEAR - 1 : 0] vxb06b6;
reg [RX_GEAR - 1 : 0] ou1adb3;
reg [RX_GEAR - 1 : 0] mgb6ccd;
reg [RX_GEAR - 1 : 0] aab3341;
reg [RX_GEAR - 1 : 0] nrcd04a;
reg [RX_GEAR - 1 : 0] gb412b1;
reg [RX_GEAR - 1 : 0] zx4ac66;
reg [RX_GEAR - 1 : 0] epb19b0;
reg [RX_GEAR - 1 : 0] dm66c2b;
reg [RX_GEAR - 1 : 0] jrb0add;
reg [RX_GEAR - 1 : 0] ks2b77c;
reg [RX_GEAR - 1 : 0] dzddf05;
reg [RX_GEAR - 1 : 0] by7c171;
reg [RX_GEAR - 1 : 0] sw5c50;
reg [RX_GEAR - 1 : 0] ld71408;
reg [RX_GEAR / 8 + 1 : 0] nr50235;
reg [RX_GEAR / 8 + 1 : 0] sj8d7e;
reg [RX_GEAR / 8 + 1 : 0] vk35fa8;
reg [RX_GEAR / 8 + 1 : 0] hb7ea1f;
reg gof50fe;
reg vka87f0;
reg kq43f83;
reg co1fc18;
reg hofe0c1;
reg kqf060b;
reg ba83058;
reg oh182c3;
reg ykc161d;
reg [3 : 0] lsb0e8;
reg [3 : 0] tu58743;
reg [3 : 0] ofc3a1b;
reg [3 : 0] kf1d0dc;
reg [RX_GEAR - 1 : 0] cm4372d;
reg [RX_GEAR - 1 : 0] endcb4b;
reg [RX_GEAR - 1 : 0] hd2d2e0;
reg [RX_GEAR - 1 : 0] yx4b83b;
reg [RX_GEAR - 1 : 0] yke0ee1;
reg [RX_GEAR - 1 : 0] uk3b845;
reg [RX_GEAR - 1 : 0] dme1145;
reg [RX_GEAR - 1 : 0] pf4515d;
reg [RX_GEAR - 1 : 0] th45776;
reg [RX_GEAR - 1 : 0] tu5ddb1;
reg [RX_GEAR - 1 : 0] tu76c53;
reg [RX_GEAR - 1 : 0] irb14d1;
reg [RX_GEAR - 1 : 0] ay53465;
reg [RX_GEAR - 1 : 0] osd1944;
reg [RX_GEAR - 1 : 0] qt65103;
reg [RX_GEAR - 1 : 0] ip440ee;
reg [RX_GEAR - 1 : 0] xl3ba3;
reg [RX_GEAR - 1 : 0] tuee8f4;
reg [RX_GEAR - 1 : 0] aaa3d1e;
reg [RX_GEAR - 1 : 0] dmf478b;
reg [RX_GEAR - 1 : 0] pu1e2d1;
reg [RX_GEAR - 1 : 0] zz8b452;
reg [RX_GEAR - 1 : 0] kqd14be;
reg [RX_GEAR - 1 : 0] ho52f8d;
reg [RX_GEAR - 1 : 0] mtbe359;
reg [RX_GEAR - 1 : 0] uk8d66b;
reg [RX_GEAR - 1 : 0] ea59ac6;
reg [RX_GEAR - 1 : 0] th6b186;
reg [RX_GEAR - 1 : 0] uvc61b2;
reg [RX_GEAR - 1 : 0] xy86cab;
reg [RX_GEAR - 1 : 0] jeb2ad5;
reg [RX_GEAR - 1 : 0] sjab555;
reg [RX_GEAR - 1 : 0] byd5567;
reg [RX_GEAR - 1 : 0] dz559df;
reg [RX_GEAR - 1 : 0] qg677f0;
reg [RX_GEAR - 1 : 0] lqdfc00;
reg [RX_GEAR - 1 : 0] osf001b;
reg [RX_GEAR - 1 : 0] mg6c4;
reg [RX_GEAR - 1 : 0] ri1b107;
reg [RX_GEAR - 1 : 0] ykc41d6;
reg [RX_GEAR - 1 : 0] cb7582;
reg [RX_GEAR - 1 : 0] qtd60aa;
reg [RX_GEAR - 1 : 0] sw82aa6;
reg [RX_GEAR - 1 : 0] xlaa981;
reg [RX_GEAR - 1 : 0] yma607c;
reg [RX_GEAR - 1 : 0] jr81f02;
reg [RX_GEAR - 1 : 0] ps7c0b8;
reg [RX_GEAR - 1 : 0] kf2e11;
reg [RX_GEAR - 1 : 0] pub8464;
reg [RX_GEAR - 1 : 0] ri11917;
reg [RX_GEAR - 1 : 0] bl645d3;
reg [RX_GEAR - 1 : 0] kf174ff;
reg [RX_GEAR - 1 : 0] ipd3fe7;
reg [RX_GEAR - 1 : 0] qgff9ed;
reg [RX_GEAR - 1 : 0] gbe7b47;
reg [RX_GEAR - 1 : 0] ened1ef;
reg [RX_GEAR - 1 : 0] by47be8;
reg [RX_GEAR - 1 : 0] qgefa17;
reg [RX_GEAR - 1 : 0] yxe85c8;
reg [RX_GEAR - 1 : 0] wl1722a;
reg [RX_GEAR - 1 : 0] vvc8aa0;
reg [RX_GEAR - 1 : 0] do2a83e;
reg [RX_GEAR - 1 : 0] zza0f9d;
reg [RX_GEAR - 1 : 0] co3e774;
reg zxf3ba1;
reg qi9dd0e;
reg lqee870;
reg ld74383;
reg [2047:0] kfa1c1e;
wire [171:0] twe0f4;

localparam gb707a3 = 172,vk83d1c = 32'hfdffc68b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;



generate    if (RX_GEAR==8) begin                        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                wl39a1b <= 0;                dzcd0dd <= 0;                cm686ee <= 0;                os43771 <= 0;            end            else            begin                wl39a1b <= kqf060b & ~(nr50235==0  & ~db37b6a);                dzcd0dd <= ba83058 & ~(sj8d7e==0 & ~xybdb56);                cm686ee <= oh182c3 & ~(vk35fa8==0 & ~kdedab3);                os43771 <= ykc161d & ~(hb7ea1f==0 & ~ww6d59c);            end        end
        assign fn50a2c = wl39a1b;        assign yz85166 = rv350e;        assign nt28b34 = ks1a877;        assign xj459a6 = sud43b9;    end    else if (RX_GEAR==16) begin        assign fn50a2c = kqf060b & ~(nr50235==0 & ~db37b6a);        assign yz85166 = ba83058 & ~(sj8d7e==0 & ~xybdb56);        assign nt28b34 = oh182c3 & ~(vk35fa8==0 & ~kdedab3);        assign xj459a6 = ykc161d & ~(hb7ea1f==0 & ~ww6d59c);    end
endgenerate
always @(posedge dz711a3 or negedge reset_n_i)
begin    if (~reset_n_i)    begin        do96f6e <= 0;    end    else if (lsb0e8 == 0)    begin        do96f6e <= db37b6a;    end
end
always @(posedge dz711a3 or negedge reset_n_i)
begin    if (~reset_n_i)    begin        nr6e69c <= oubc64e;    end        else if (!db37b6a)    begin        nr6e69c <= oubc64e;    end    else if (lsb0e8 == 0)    begin        nr6e69c <= 0;    end    else if (db37b6a)    begin        nr6e69c <= lsb0e8 - 1;    end
end
generate    if (NUM_RX_LANE > 1) begin        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                lsb7b73 <= 0;            end            else if (tu58743 == 0)            begin                lsb7b73 <= xybdb56;            end        end
        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                vi734e6 <= oubc64e;            end                        else if (!xybdb56)            begin                vi734e6 <= oubc64e;            end            else if (tu58743 == 0)            begin                vi734e6 <= 0;            end            else if (xybdb56)            begin                vi734e6 <= tu58743 - 1;            end        end    end    if (NUM_RX_LANE > 2) begin        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                jebdb9a <= 0;            end            else if (ofc3a1b == 0)            begin                jebdb9a <= kdedab3;            end        end        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                qv9a733 <= oubc64e;            end                        else if (!kdedab3)            begin                qv9a733 <= oubc64e;            end            else if (ofc3a1b == 0)            begin                qv9a733 <= 0;            end            else if (kdedab3)            begin                qv9a733 <= ofc3a1b - 1;            end        end    end    if (NUM_RX_LANE > 3) begin        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                czedcd3 <= 0;            end            else if (kf1d0dc == 0)            begin                czedcd3 <= ww6d59c;            end        end        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                mrd399c <= oubc64e;            end                        else if (!ww6d59c)            begin                mrd399c <= oubc64e;            end            else if (kf1d0dc == 0)            begin                mrd399c <= 0;            end            else if (ww6d59c)            begin                mrd399c <= kf1d0dc - 1;            end        end    end
endgenerate
generate    if (RX_GEAR == 8)    begin : th7e2df        assign    bd0_o = nrcd04a;        if (NUM_RX_LANE > 1)            assign    bd1_o = epb19b0;        if (NUM_RX_LANE > 2)            assign    bd2_o = ks2b77c;        if (NUM_RX_LANE == 4)            assign    bd3_o = sw5c50;    end    else if (RX_GEAR == 16)    begin : ls3a47b        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                hb5a75e <= 0;                gb5ed4b <= 0;                gb4bbb1 <= 0;                ohb189b <= 0;            end            else            begin                hb5a75e <= nrcd04a;                gb5ed4b <= epb19b0;                gb4bbb1 <= ks2b77c;                ohb189b <= sw5c50;            end        end        assign    bd0_o = gb412b1;        if (NUM_RX_LANE > 1)            assign    bd1_o = dm66c2b;        if (NUM_RX_LANE > 2)            assign    bd2_o = dzddf05;        if (NUM_RX_LANE == 4)            assign    bd3_o = ld71408;    end  if (NUM_RX_LANE == 1)    always @(posedge dz711a3 or negedge reset_n_i)    begin       if (~reset_n_i) begin            hdbf196 <= 1'b0;       end       else if (!zxf3ba1) begin            hdbf196 <= 1'b0;       end       else begin            hdbf196 <= gof50fe;       end    end  else if (NUM_RX_LANE == 2)    always @(posedge dz711a3 or negedge reset_n_i)    begin       if (~reset_n_i) begin         hdbf196 <= 1'b0;       end       else begin         if (!zxf3ba1 & !qi9dd0e)            hdbf196 <= 1'b0;         else if (gof50fe & kq43f83)            hdbf196 <= 1'b1;       end    end  else if (NUM_RX_LANE == 3)    always @(posedge dz711a3 or negedge reset_n_i)    begin       if (~reset_n_i) begin            hdbf196 <= 1'b0;       end       else if (!zxf3ba1 & !qi9dd0e & !lqee870) begin            hdbf196 <= 1'b0;       end       else if (gof50fe & kq43f83 & co1fc18) begin            hdbf196 <= 1'b1;       end    end  else    always @(posedge dz711a3 or negedge reset_n_i)    begin       if (~reset_n_i) begin            hdbf196 <= 1'b0;       end       else if (!zxf3ba1 & !qi9dd0e & !lqee870 & !ld74383) begin            hdbf196 <= 1'b0;       end       else if (gof50fe & kq43f83 & co1fc18 & hofe0c1) begin            hdbf196 <= 1'b1;       end    end
endgenerate
always @(posedge dz711a3 or negedge reset_n_i)
begin   if (~reset_n_i) begin        hbfca48  <= 0;   end   else if (!gof50fe) begin        hbfca48 <= 1'b0;   end   else if (nr50235 != sj8d7e) begin        hbfca48 <= 1'b1;   end   else if (nr50235 != vk35fa8) begin        hbfca48 <= 1'b1;  end   else if (nr50235 != hb7ea1f) begin        hbfca48 <= 1'b1;    end
end

assign  hs_sync_o = vka87f0;  

assign  kqe5247 = gof50fe;
assign  yz29239 = kq43f83;
assign  ic491cd = co1fc18;
assign  rg48e68 = hofe0c1;

assign    dze672a = cm5670d;
assign    qv33956 = {cm5670d[RX_GEAR-2:0], aab3341[RX_GEAR-1]};
assign    xy9cab4 = {cm5670d[RX_GEAR-3:0], aab3341[RX_GEAR-1:RX_GEAR-2]};
assign    ose55a2 = {cm5670d[RX_GEAR-4:0], aab3341[RX_GEAR-1:RX_GEAR-3]};
assign    do2ad11 = {cm5670d[RX_GEAR-5:0], aab3341[RX_GEAR-1:RX_GEAR-4]};
assign    ww5688b = {cm5670d[RX_GEAR-6:0], aab3341[RX_GEAR-1:RX_GEAR-5]};
assign    irb4459 = {cm5670d[RX_GEAR-7:0], aab3341[RX_GEAR-1:RX_GEAR-6]};
assign    lsa22cc = {cm5670d[RX_GEAR-8:0], aab3341[RX_GEAR-1:RX_GEAR-7]};
generate    if (RX_GEAR == 16)    begin        assign    xl8b313 = {cm5670d[RX_GEAR-9:0], aab3341[RX_GEAR-1:RX_GEAR-8]};        assign    kq5989f = {cm5670d[RX_GEAR-10:0], aab3341[RX_GEAR-1:RX_GEAR-9]};        assign    qtcc4f8 = {cm5670d[RX_GEAR-11:0], aab3341[RX_GEAR-1:RX_GEAR-10]};        assign    cm627c4 = {cm5670d[RX_GEAR-12:0], aab3341[RX_GEAR-1:RX_GEAR-11]};        assign    jr13e20 = {cm5670d[RX_GEAR-13:0], aab3341[RX_GEAR-1:RX_GEAR-12]};        assign    ir9f107 = {cm5670d[RX_GEAR-14:0], aab3341[RX_GEAR-1:RX_GEAR-13]};        assign    alf883c = {cm5670d[RX_GEAR-15:0], aab3341[RX_GEAR-1:RX_GEAR-14]};        assign    goc41e5 = {cm5670d[RX_GEAR-16:0], aab3341[RX_GEAR-1:RX_GEAR-15]};    end
endgenerate
generate    if (NUM_RX_LANE > 1)    begin        assign    ux7942 = je9c340;        assign    gd3ca14 = {je9c340[RX_GEAR-2:0], zx4ac66[RX_GEAR-1]};        assign    cme50a5 = {je9c340[RX_GEAR-3:0], zx4ac66[RX_GEAR-1:RX_GEAR-2]};        assign    nt28529 = {je9c340[RX_GEAR-4:0], zx4ac66[RX_GEAR-1:RX_GEAR-3]};        assign    zk4294f = {je9c340[RX_GEAR-5:0], zx4ac66[RX_GEAR-1:RX_GEAR-4]};        assign    tw14a7a = {je9c340[RX_GEAR-6:0], zx4ac66[RX_GEAR-1:RX_GEAR-5]};        assign    hda53d2 = {je9c340[RX_GEAR-7:0], zx4ac66[RX_GEAR-1:RX_GEAR-6]};        assign    an29e97 = {je9c340[RX_GEAR-8:0], zx4ac66[RX_GEAR-1:RX_GEAR-7]};        if (RX_GEAR == 16)        begin            assign    mr7a5e7 = {je9c340[RX_GEAR-9:0],  zx4ac66[RX_GEAR-1:RX_GEAR-8]};            assign    bld2f3d = {je9c340[RX_GEAR-10:0], zx4ac66[RX_GEAR-1:RX_GEAR-9]};            assign    uk979ef = {je9c340[RX_GEAR-11:0], zx4ac66[RX_GEAR-1:RX_GEAR-10]};            assign    qibcf79 = {je9c340[RX_GEAR-12:0], zx4ac66[RX_GEAR-1:RX_GEAR-11]};            assign    gbe7bc9 = {je9c340[RX_GEAR-13:0], zx4ac66[RX_GEAR-1:RX_GEAR-12]};            assign    tj3de4d = {je9c340[RX_GEAR-14:0], zx4ac66[RX_GEAR-1:RX_GEAR-13]};            assign    cmef26f = {je9c340[RX_GEAR-15:0], zx4ac66[RX_GEAR-1:RX_GEAR-14]};            assign    lq79378 = {je9c340[RX_GEAR-16:0], zx4ac66[RX_GEAR-1:RX_GEAR-15]};        end    end    if (NUM_RX_LANE > 2)    begin        assign    rg4de15 = cbd01a;        assign    qt6f0ab = {cbd01a[RX_GEAR-2:0], jrb0add[RX_GEAR-1]};        assign    su7855c = {cbd01a[RX_GEAR-3:0], jrb0add[RX_GEAR-1:RX_GEAR-2]};        assign    thc2ae0 = {cbd01a[RX_GEAR-4:0], jrb0add[RX_GEAR-1:RX_GEAR-3]};        assign    wy15706 = {cbd01a[RX_GEAR-5:0], jrb0add[RX_GEAR-1:RX_GEAR-4]};        assign    irab831 = {cbd01a[RX_GEAR-6:0], jrb0add[RX_GEAR-1:RX_GEAR-5]};        assign    kq5c18d = {cbd01a[RX_GEAR-7:0], jrb0add[RX_GEAR-1:RX_GEAR-6]};        assign    sue0c69 = {cbd01a[RX_GEAR-8:0], jrb0add[RX_GEAR-1:RX_GEAR-7]};        if (RX_GEAR == 16)        begin            assign    ie31a47 = {cbd01a[RX_GEAR-9:0],  jrb0add[RX_GEAR-1:RX_GEAR-8]};            assign    ou8d239 = {cbd01a[RX_GEAR-10:0], jrb0add[RX_GEAR-1:RX_GEAR-9]};            assign    ne691c8 = {cbd01a[RX_GEAR-11:0], jrb0add[RX_GEAR-1:RX_GEAR-10]};            assign    zk48e43 = {cbd01a[RX_GEAR-12:0], jrb0add[RX_GEAR-1:RX_GEAR-11]};            assign    by4721b = {cbd01a[RX_GEAR-13:0], jrb0add[RX_GEAR-1:RX_GEAR-12]};            assign    oh390db = {cbd01a[RX_GEAR-14:0], jrb0add[RX_GEAR-1:RX_GEAR-13]};            assign    nrc86dc = {cbd01a[RX_GEAR-15:0], jrb0add[RX_GEAR-1:RX_GEAR-14]};            assign    ea436e6 = {cbd01a[RX_GEAR-16:0], jrb0add[RX_GEAR-1:RX_GEAR-15]};        end    end    if (NUM_RX_LANE == 4)    begin        assign    wwdb98a = fn406a1;        assign    mrdcc51 = {fn406a1[RX_GEAR-2:0], by7c171[RX_GEAR-1]};        assign    hbe628c = {fn406a1[RX_GEAR-3:0], by7c171[RX_GEAR-1:RX_GEAR-2]};        assign    uk31466 = {fn406a1[RX_GEAR-4:0], by7c171[RX_GEAR-1:RX_GEAR-3]};        assign    ep8a330 = {fn406a1[RX_GEAR-5:0], by7c171[RX_GEAR-1:RX_GEAR-4]};        assign    qt51985 = {fn406a1[RX_GEAR-6:0], by7c171[RX_GEAR-1:RX_GEAR-5]};        assign    hq8cc2c = {fn406a1[RX_GEAR-7:0], by7c171[RX_GEAR-1:RX_GEAR-6]};        assign    ne66163 = {fn406a1[RX_GEAR-8:0], by7c171[RX_GEAR-1:RX_GEAR-7]};        if (RX_GEAR == 16)        begin            assign    kf858d3 = {fn406a1[RX_GEAR-9:0],  by7c171[RX_GEAR-1:RX_GEAR-8]};            assign    ir2c69d = {fn406a1[RX_GEAR-10:0], by7c171[RX_GEAR-1:RX_GEAR-9]};            assign    lq634ed = {fn406a1[RX_GEAR-11:0], by7c171[RX_GEAR-1:RX_GEAR-10]};            assign    aa1a76a = {fn406a1[RX_GEAR-12:0], by7c171[RX_GEAR-1:RX_GEAR-11]};            assign    ofd3b50 = {fn406a1[RX_GEAR-13:0], by7c171[RX_GEAR-1:RX_GEAR-12]};            assign    uk9da85 = {fn406a1[RX_GEAR-14:0], by7c171[RX_GEAR-1:RX_GEAR-13]};            assign    shed428 = {fn406a1[RX_GEAR-15:0], by7c171[RX_GEAR-1:RX_GEAR-14]};            assign    of6a145 = {fn406a1[RX_GEAR-16:0], by7c171[RX_GEAR-1:RX_GEAR-15]};        end    end
endgenerate
always @(posedge dz711a3 or negedge reset_n_i)
begin    if (~reset_n_i)        lsad69d <= {RX_GEAR{1'b1}};    else        lsad69d <= cm5670d;
end
generate    if (NUM_RX_LANE > 1)        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)                aa9d7b5 <= {RX_GEAR{1'b1}};            else                aa9d7b5 <= je9c340;        end    if (NUM_RX_LANE > 2)        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)                rvb52ee <= {RX_GEAR{1'b1}};            else                rvb52ee <= cbd01a;        end    if (NUM_RX_LANE == 4)        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)                vieec62 <= {RX_GEAR{1'b1}};            else                vieec62 <= fn406a1;        end
endgenerate
generate    if (RX_GEAR == 8)        begin
        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                thddc4b <= {RX_GEAR{1'b1}};                jcee25e <= {RX_GEAR{1'b1}};                rt712f2 <= {RX_GEAR{1'b1}};                fc89796 <= {RX_GEAR{1'b1}};                uv4bcb2 <= {RX_GEAR{1'b1}};                kd5e594 <= {RX_GEAR{1'b1}};                qtf2ca4 <= {RX_GEAR{1'b1}};                xy96524 <= {RX_GEAR{1'b1}};                zxfc462 <= {RX_GEAR{1'b1}};                wje2316 <= {RX_GEAR{1'b1}};                ls118b4 <= {RX_GEAR{1'b1}};                tw8c5a2 <= {RX_GEAR{1'b1}};                ay62d12 <= {RX_GEAR{1'b1}};                xl16891 <= {RX_GEAR{1'b1}};                qvb448f <= {RX_GEAR{1'b1}};                xya247c <= {RX_GEAR{1'b1}};            end            else            begin                thddc4b <= cm4372d;                jcee25e <= endcb4b;                rt712f2 <= hd2d2e0;                fc89796 <= yx4b83b;                uv4bcb2 <= yke0ee1;                kd5e594 <= uk3b845;                qtf2ca4 <= dme1145;                xy96524 <= pf4515d;                zxfc462 <= hqee4c;                wje2316 <= oub9311;                ls118b4 <= ay4c445;                tw8c5a2 <= xy11140;                ay62d12 <= th45019;                xl16891 <= th40677;                qvb448f <= zz19df7;                xya247c <= kq77df0;            end        end
        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                ld6b4eb <= 0;                rv37e32 <= 0;                os626ea <= 3'd0;            end            else if (~wl39a1b | ((nr50235==0) & ~kqf060b))            begin                ld6b4eb <= 0;                rv37e32 <= 0;                os626ea <= 3'd0;            end            else if ((~gof50fe & (hqee4c == yx70ded)) | (gof50fe & (nr50235 == 3'd0)))            begin                ld6b4eb <= sjb4c34;                rv37e32 <= 1;                os626ea <= 3'd0;            end            else if ((~gof50fe & (oub9311 == yx70ded)) | (gof50fe & (nr50235 == 3'd1)))            begin                ld6b4eb <= pu30d28;                rv37e32 <= 1;                os626ea <= 3'd1;            end            else if ((~gof50fe & (ay4c445 == yx70ded)) | (gof50fe & (nr50235 == 3'd2)))            begin                ld6b4eb <= wy34a1a;                rv37e32 <= 1;                os626ea <= 3'd2;            end            else if ((~gof50fe & (xy11140 == yx70ded)) | (gof50fe & (nr50235 == 3'd3)))            begin                ld6b4eb <= ph2868f;                rv37e32 <= 1;                os626ea <= 3'd3;            end            else if ((~gof50fe & (th45019 == yx70ded)) | (gof50fe & (nr50235 == 3'd4)))            begin                ld6b4eb <= mg1a3f9;                rv37e32 <= 1;                os626ea <= 3'd4;            end            else if ((~gof50fe & (th40677 == yx70ded)) | (gof50fe & (nr50235 == 3'd5)))            begin                ld6b4eb <= qv8fe40;                rv37e32 <= 1;                os626ea <= 3'd5;            end            else if ((~gof50fe & (zz19df7 == yx70ded)) | (gof50fe & (nr50235 == 3'd6)))            begin                ld6b4eb <= pff9025;                rv37e32 <= 1;                os626ea <= 3'd6;            end            else if ((~gof50fe & (kq77df0 == yx70ded)) | (gof50fe & (nr50235 == 3'd7)))            begin                ld6b4eb <= th40976;                rv37e32 <= 1;                os626ea <= 3'd7;            end




	end        if (NUM_RX_LANE > 1)        begin            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    lf94912 <= {RX_GEAR{1'b1}};                    uxa4896 <= {RX_GEAR{1'b1}};                    uk244b4 <= {RX_GEAR{1'b1}};                    bn225a1 <= {RX_GEAR{1'b1}};                    an12d0e <= {RX_GEAR{1'b1}};                    ng96875 <= {RX_GEAR{1'b1}};                    ohb43ab <= {RX_GEAR{1'b1}};                    ira1d5c <= {RX_GEAR{1'b1}};                    ph91f14 <= {RX_GEAR{1'b1}};                    an8f8a6 <= {RX_GEAR{1'b1}};                    fa7c534 <= {RX_GEAR{1'b1}};                    she29a2 <= {RX_GEAR{1'b1}};                    je14d15 <= {RX_GEAR{1'b1}};                    coa68aa <= {RX_GEAR{1'b1}};                    ks34551 <= {RX_GEAR{1'b1}};                    baa2a88 <= {RX_GEAR{1'b1}};                end                else                begin                    lf94912 <= xl3ba3;                    uxa4896 <= tuee8f4;                    uk244b4 <= aaa3d1e;                    bn225a1 <= dmf478b;                    an12d0e <= pu1e2d1;                    ng96875 <= zz8b452;                    ohb43ab <= kqd14be;                    ira1d5c <= ho52f8d;                    ph91f14 <= uvf7c04;                    an8f8a6 <= mef0125;                    fa7c534 <= tw4945;                    she29a2 <= ri25158;                    je14d15 <= vv4561e;                    coa68aa <= ne587b0;                    ks34551 <= pu1ec1c;                    baa2a88 <= zzb071f;                end            end            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i) begin                    rgebda9 <= 0;                    mrf8cb7 <= 0;                    tj9ba86 <= 3'd0;                end                else if (~rv350e | ((sj8d7e==0) & ~ba83058) ) begin                    rgebda9 <= 0;                    mrf8cb7 <= 0;                    tj9ba86 <= 3'd0;                end                else if ((~kq43f83 & (uvf7c04 == yx70ded)) | (kq43f83 & (sj8d7e == 3'd0))) begin                    rgebda9 <= ng25dbb;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd0;                end                else if ((~kq43f83 & (mef0125 == yx70ded)) | (kq43f83 & (sj8d7e == 3'd1))) begin                    rgebda9 <= xw76ed1;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd1;                end                else if ((~kq43f83 & (tw4945 == yx70ded)) | (kq43f83 & (sj8d7e == 3'd2))) begin                    rgebda9 <= mtbb453;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd2;                end                else if ((~kq43f83 & (ri25158 == yx70ded)) | (kq43f83 & (sj8d7e == 3'd3))) begin                    rgebda9 <= ead14ea;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd3;                end                else if ((~kq43f83 & (vv4561e == yx70ded)) | (kq43f83 & (sj8d7e == 3'd4))) begin                    rgebda9 <= me53a8d;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd4;                end                else if ((~kq43f83 & (ne587b0 == yx70ded)) | (kq43f83 & (sj8d7e == 3'd5))) begin                    rgebda9 <= wwea349;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd5;                end                else if ((~kq43f83 & (pu1ec1c == yx70ded)) | (kq43f83 & (sj8d7e == 3'd6))) begin                    rgebda9 <= gq8d244;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd6;                end                else if ((~kq43f83 & (zzb071f == yx70ded)) | (kq43f83 & (sj8d7e == 3'd7))) begin                    rgebda9 <= go49103;                    mrf8cb7 <= 1;                    tj9ba86 <= 3'd7;                end

            end        end        if (NUM_RX_LANE > 2)        begin            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    en75722 <= {RX_GEAR{1'b1}};                    gdab914 <= {RX_GEAR{1'b1}};                    ui5c8a5 <= {RX_GEAR{1'b1}};                    rge4528 <= {RX_GEAR{1'b1}};                    db22943 <= {RX_GEAR{1'b1}};                    tw14a1f <= {RX_GEAR{1'b1}};                    hda50fa <= {RX_GEAR{1'b1}};                    bn287d7 <= {RX_GEAR{1'b1}};                    fpaa219 <= {RX_GEAR{1'b1}};                    kd510ce <= {RX_GEAR{1'b1}};                    ou88675 <= {RX_GEAR{1'b1}};                    me433a8 <= {RX_GEAR{1'b1}};                    zz19d41 <= {RX_GEAR{1'b1}};                    eacea0e <= {RX_GEAR{1'b1}};                    mr75070 <= {RX_GEAR{1'b1}};                    ria8384 <= {RX_GEAR{1'b1}};                end                else                begin                    en75722 <= byd5567;                    gdab914 <= dz559df;                    ui5c8a5 <= qg677f0;                    rge4528 <= lqdfc00;                    db22943 <= osf001b;                    tw14a1f <= mg6c4;                    hda50fa <= ri1b107;                    bn287d7 <= ykc41d6;                    fpaa219 <= jr1c7f2;                    kd510ce <= uk1fcbf;                    ou88675 <= uvf2fcb;                    me433a8 <= fpbf2e1;                    zz19d41 <= eacb87e;                    eacea0e <= tue1f81;                    mr75070 <= zx7e050;                    ria8384 <= lf81438;                end            end            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i) begin                    eca9776 <= 0;                    alc65bd <= 0;                    goea1bf <= 3'd0;                end                else if (~ks1a877 | ((vk35fa8==0) & ~oh182c3)) begin                    eca9776 <= 0;                    alc65bd <= 0;                    goea1bf <= 3'd0;                end                else if ((~co1fc18 & (jr1c7f2 == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd0))) begin                    eca9776 <= sh440c3;                    alc65bd <= 1;                    goea1bf <= 3'd0;                end                else if ((~co1fc18 & (uk1fcbf == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd1))) begin                    eca9776 <= nt30e3;                    alc65bd <= 1;                    goea1bf <= 3'd1;                end                else if ((~co1fc18 & (uvf2fcb == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd2))) begin                    eca9776 <= ofc38fd;                    alc65bd <= 1;                    goea1bf <= 3'd2;                end                else if ((~co1fc18 & (fpbf2e1 == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd3))) begin                    eca9776 <= dze3f67;                    alc65bd <= 1;                    goea1bf <= 3'd3;                end                else if ((~co1fc18 & (eacb87e == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd4))) begin                    eca9776 <= gbfd9f9;                    alc65bd <= 1;                    goea1bf <= 3'd4;                end                else if ((~co1fc18 & (tue1f81 == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd5))) begin                    eca9776 <= ic67e6e;                    alc65bd <= 1;                    goea1bf <= 3'd5;                end                else if ((~co1fc18 & (zx7e050 == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd6))) begin                    eca9776 <= nrf9b8b;                    alc65bd <= 1;                    goea1bf <= 3'd6;                end                else if ((~co1fc18 & (lf81438 == yx70ded)) | (co1fc18 & (vk35fa8 == 3'd7))) begin                    eca9776 <= fn6e2ff;                    alc65bd <= 1;                    goea1bf <= 3'd7;                end

            end        end        if (NUM_RX_LANE == 4)        begin            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i)                begin                    wy1f5f8 <= {RX_GEAR{1'b1}};                    gofafc0 <= {RX_GEAR{1'b1}};                    bld7e00 <= {RX_GEAR{1'b1}};                    xlbf007 <= {RX_GEAR{1'b1}};                    kdf803f <= {RX_GEAR{1'b1}};                    fac01fc <= {RX_GEAR{1'b1}};                    oufe2 <= {RX_GEAR{1'b1}};                    oh7f11 <= {RX_GEAR{1'b1}};                    bae11d <= {RX_GEAR{1'b1}};                    sh708eb <= {RX_GEAR{1'b1}};                    tj8475d <= {RX_GEAR{1'b1}};                    yz23aee <= {RX_GEAR{1'b1}};                    gd1d775 <= {RX_GEAR{1'b1}};                    neebbad <= {RX_GEAR{1'b1}};                    zk5dd6b <= {RX_GEAR{1'b1}};                    faeeb5a <= {RX_GEAR{1'b1}};                end                else                begin                    wy1f5f8 <= pub8464;                    gofafc0 <= ri11917;                    bld7e00 <= bl645d3;                    xlbf007 <= kf174ff;                    kdf803f <= ipd3fe7;                    fac01fc <= qgff9ed;                    oufe2 <= gbe7b47;                    oh7f11 <= ened1ef;                    bae11d <= nr50e31;                    sh708eb <= tj38c71;                    tj8475d <= ks31c7d;                    yz23aee <= pf71f4f;                    gd1d775 <= ic7d3fc;                    neebbad <= dz4ff06;                    zk5dd6b <= ldfc1b4;                    faeeb5a <= lf6d30;                end            end            always @(posedge dz711a3 or negedge reset_n_i)            begin                if (~reset_n_i) begin                    lq76313 <= 0;                    hd32ded <= 0;                    fc86fc6 <= 3'd0;                end                else if (~sud43b9 | ((hb7ea1f==0) & ~ykc161d) ) begin                    lq76313 <= 0;                    hd32ded <= 0;                    fc86fc6 <= 3'd0;                end                else if ((~hofe0c1 & (nr50e31 == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd0))) begin                    lq76313 <= lf8bff6;                    hd32ded <= 1;                    fc86fc6 <= 3'd0;                end                else if ((~hofe0c1 & (tj38c71 == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd1))) begin                    lq76313 <= wwffdb7;                    hd32ded <= 1;                    fc86fc6 <= 3'd1;                end                else if ((~hofe0c1 & (ks31c7d == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd2))) begin                    lq76313 <= hbf6dc2;                    hd32ded <= 1;                    fc86fc6 <= 3'd2;                end                else if ((~hofe0c1 & (pf71f4f == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd3))) begin                    lq76313 <= pub70b0;                    hd32ded <= 1;                    fc86fc6 <= 3'd3;                end                else if ((~hofe0c1 & (ic7d3fc == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd4))) begin                    lq76313 <= blc2c1a;                    hd32ded <= 1;                    fc86fc6 <= 3'd4;                end                else if ((~hofe0c1 & (dz4ff06 == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd5))) begin                    lq76313 <= vxb06b6;                    hd32ded <= 1;                    fc86fc6 <= 3'd5;                end                else if ((~hofe0c1 & (ldfc1b4 == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd6))) begin                    lq76313 <= ou1adb3;                    hd32ded <= 1;                    fc86fc6 <= 3'd6;                end                else if ((~hofe0c1 & (lf6d30 == yx70ded)) | (hofe0c1 & (hb7ea1f == 3'd7))) begin                    lq76313 <= mgb6ccd;                    hd32ded <= 1;                    fc86fc6 <= 3'd7;                end

            end        end    end    else if (RX_GEAR == 16)        begin
        always @(posedge dz711a3 or negedge reset_n_i)        begin            if (~reset_n_i)            begin                ld6b4eb <= 0;                rv37e32 <= 0;                os626ea <= 4'd0;            end            else if (~kqf060b | ((nr50235==0) & ~db37b6a))            begin                ld6b4eb <= 0;                rv37e32 <= 0;                os626ea <= 4'd0;            end            else if ((~gof50fe & (cm4372d == yx70ded)) | (gof50fe & (nr50235 == 4'd0)))            begin                ld6b4eb <= cm4372d;                rv37e32 <= 1;                os626ea <= 4'd0;            end            else if ((~gof50fe & (endcb4b == yx70ded)) | (gof50fe & (nr50235 == 4'd1)))            begin                ld6b4eb <= endcb4b;                rv37e32 <= 1;                os626ea <= 4'd1;            end            else if ((~gof50fe & (hd2d2e0 == yx70ded)) | (gof50fe & (nr50235 == 4'd2)))            begin                ld6b4eb <= hd2d2e0;                rv37e32 <= 1;                os626ea <= 4'd2;            end            else if ((~gof50fe & (yx4b83b == yx70ded)) | (gof50fe & (nr50235 == 4'd3)))            begin                ld6b4eb <= yx4b83b;                rv37e32 <= 1;                os626ea <= 4'd3;            end            else if ((~gof50fe & (yke0ee1 == yx70ded)) | (gof50fe & (nr50235 == 4'd4)))            begin                ld6b4eb <= yke0ee1;                rv37e32 <= 1;                os626ea <= 4'd4;            end            else if ((~gof50fe & (uk3b845 == yx70ded)) | (gof50fe & (nr50235 == 4'd5)))            begin                ld6b4eb <= uk3b845;                rv37e32 <= 1;                os626ea <= 4'd5;            end            else if ((~gof50fe & (dme1145 == yx70ded)) | (gof50fe & (nr50235 == 4'd6)))            begin                ld6b4eb <= dme1145;                rv37e32 <= 1;                os626ea <= 4'd6;            end            else if ((~gof50fe & (pf4515d == yx70ded)) | (gof50fe & (nr50235 == 4'd7)))            begin                ld6b4eb <= pf4515d;                rv37e32 <= 1;                os626ea <= 4'd7;            end            else if ((~gof50fe & (th45776 == yx70ded)) | (gof50fe & (nr50235 == 4'd8)))            begin                ld6b4eb <= th45776;                rv37e32 <= 1;                os626ea <= 4'd8;            end            else if ((~gof50fe & (tu5ddb1 == yx70ded)) | (gof50fe & (nr50235 == 4'd9)))            begin                ld6b4eb <= tu5ddb1;                rv37e32 <= 1;                os626ea <= 4'd9;            end            else if ((~gof50fe & (tu76c53 == yx70ded)) | (gof50fe & (nr50235 == 4'd10)))            begin                ld6b4eb <= tu76c53;                rv37e32 <= 1;                os626ea <= 4'd10;            end            else if ((~gof50fe & (irb14d1 == yx70ded)) | (gof50fe & (nr50235 == 4'd11)))            begin                ld6b4eb <= irb14d1;                rv37e32 <= 1;                os626ea <= 4'd11;            end            else if ((~gof50fe & (ay53465 == yx70ded)) | (gof50fe & (nr50235 == 4'd12)))            begin                ld6b4eb <= ay53465;                rv37e32 <= 1;                os626ea <= 4'd12;            end            else if ((~gof50fe & (osd1944 == yx70ded)) | (gof50fe & (nr50235 == 4'd13)))            begin                ld6b4eb <= osd1944;                rv37e32 <= 1;                os626ea <= 4'd13;            end            else if ((~gof50fe & (qt65103 == yx70ded)) | (gof50fe & (nr50235 == 4'd14)))            begin                ld6b4eb <= qt65103;                rv37e32 <= 1;                os626ea <= 4'd14;            end            else if ((~gof50fe & (ip440ee == yx70ded)) | (gof50fe & (nr50235 == 4'd15)))            begin                ld6b4eb <= ip440ee;                rv37e32 <= 1;                os626ea <= 4'd15;            end





        end
        if (NUM_RX_LANE > 1)        begin          always @(posedge dz711a3 or negedge reset_n_i)          begin              if (~reset_n_i)              begin                  rgebda9 <= 0;                  mrf8cb7 <= 0;                  tj9ba86 <= 4'd0;              end              else if (~ba83058 | ((sj8d7e==0) & ~xybdb56))              begin                  rgebda9 <= 0;                  mrf8cb7 <= 0;                  tj9ba86 <= 4'd0;              end              else if ((~kq43f83 & (xl3ba3 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd0)))              begin                  rgebda9 <= xl3ba3;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd0;              end              else if ((~kq43f83 & (tuee8f4 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd1)))              begin                  rgebda9 <= tuee8f4;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd1;              end              else if ((~kq43f83 & (aaa3d1e == yx70ded)) | (kq43f83 & (sj8d7e == 4'd2)))              begin                  rgebda9 <= aaa3d1e;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd2;              end              else if ((~kq43f83 & (dmf478b == yx70ded)) | (kq43f83 & (sj8d7e == 4'd3)))              begin                  rgebda9 <= dmf478b;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd3;              end              else if ((~kq43f83 & (pu1e2d1 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd4)))              begin                  rgebda9 <= pu1e2d1;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd4;              end              else if ((~kq43f83 & (zz8b452 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd5)))              begin                  rgebda9 <= zz8b452;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd5;              end              else if ((~kq43f83 & (kqd14be == yx70ded)) | (kq43f83 & (sj8d7e == 4'd6)))              begin                  rgebda9 <= kqd14be;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd6;              end              else if ((~kq43f83 & (ho52f8d == yx70ded)) | (kq43f83 & (sj8d7e == 4'd7)))              begin                  rgebda9 <= ho52f8d;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd7;              end              else if ((~kq43f83 & (mtbe359 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd8)))              begin                  rgebda9 <= mtbe359;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd8;              end              else if ((~kq43f83 & (uk8d66b == yx70ded)) | (kq43f83 & (sj8d7e == 4'd9)))              begin                  rgebda9 <= uk8d66b;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd9;              end              else if ((~kq43f83 & (ea59ac6 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd10)))              begin                  rgebda9 <= ea59ac6;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd10;              end              else if ((~kq43f83 & (th6b186 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd11)))              begin                  rgebda9 <= th6b186;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd11;              end              else if ((~kq43f83 & (uvc61b2 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd12)))              begin                  rgebda9 <= uvc61b2;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd12;              end              else if ((~kq43f83 & (xy86cab == yx70ded)) | (kq43f83 & (sj8d7e == 4'd13)))              begin                  rgebda9 <= xy86cab;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd13;              end              else if ((~kq43f83 & (jeb2ad5 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd14)))              begin                  rgebda9 <= jeb2ad5;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd14;              end              else if ((~kq43f83 & (sjab555 == yx70ded)) | (kq43f83 & (sj8d7e == 4'd15)))              begin                  rgebda9 <= sjab555;                  mrf8cb7 <= 1;                  tj9ba86 <= 4'd15;              end                      end        end        if (NUM_RX_LANE > 2)        begin          always @(posedge dz711a3 or negedge reset_n_i)          begin              if (~reset_n_i)              begin                  eca9776 <= 0;                  alc65bd <= 0;                  goea1bf <= 4'd0;              end              else if (~oh182c3 | ((vk35fa8==0) & ~kdedab3))              begin                  eca9776 <= 0;                  alc65bd <= 0;                  goea1bf <= 4'd0;              end              else if ((~co1fc18 & (byd5567 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd0)))              begin                  eca9776 <= byd5567;                  alc65bd <= 1;                  goea1bf <= 4'd0;              end              else if ((~co1fc18 & (dz559df == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd1)))              begin                  eca9776 <= dz559df;                  alc65bd <= 1;                  goea1bf <= 4'd1;              end              else if ((~co1fc18 & (qg677f0 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd2)))              begin                  eca9776 <= qg677f0;                  alc65bd <= 1;                  goea1bf <= 4'd2;              end              else if ((~co1fc18 & (lqdfc00 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd3)))              begin                  eca9776 <= lqdfc00;                  alc65bd <= 1;                  goea1bf <= 4'd3;              end              else if ((~co1fc18 & (osf001b == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd4)))              begin                  eca9776 <= osf001b;                  alc65bd <= 1;                  goea1bf <= 4'd4;              end              else if ((~co1fc18 & (mg6c4 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd5)))              begin                  eca9776 <= mg6c4;                  alc65bd <= 1;                  goea1bf <= 4'd5;              end              else if ((~co1fc18 & (ri1b107 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd6)))              begin                  eca9776 <= ri1b107;                  alc65bd <= 1;                  goea1bf <= 4'd6;              end              else if ((~co1fc18 & (ykc41d6 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd7)))              begin                  eca9776 <= ykc41d6;                  alc65bd <= 1;                  goea1bf <= 4'd7;              end              else if ((~co1fc18 & (cb7582 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd8)))              begin                  eca9776 <= cb7582;                  alc65bd <= 1;                  goea1bf <= 4'd8;              end              else if ((~co1fc18 & (qtd60aa == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd9)))              begin                  eca9776 <= qtd60aa;                  alc65bd <= 1;                  goea1bf <= 4'd9;              end              else if ((~co1fc18 & (sw82aa6 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd10)))              begin                  eca9776 <= sw82aa6;                  alc65bd <= 1;                  goea1bf <= 4'd10;              end              else if ((~co1fc18 & (xlaa981 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd11)))              begin                  eca9776 <= xlaa981;                  alc65bd <= 1;                  goea1bf <= 4'd11;              end              else if ((~co1fc18 & (yma607c == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd12)))              begin                  eca9776 <= yma607c;                  alc65bd <= 1;                  goea1bf <= 4'd12;              end              else if ((~co1fc18 & (jr81f02 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd13)))              begin                  eca9776 <= jr81f02;                  alc65bd <= 1;                  goea1bf <= 4'd13;              end              else if ((~co1fc18 & (ps7c0b8 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd14)))              begin                  eca9776 <= ps7c0b8;                  alc65bd <= 1;                  goea1bf <= 4'd14;              end              else if ((~co1fc18 & (kf2e11 == yx70ded)) | (co1fc18 & (vk35fa8 == 4'd15)))              begin                  eca9776 <= kf2e11;                  alc65bd <= 1;
                  goea1bf <= 4'd15;              end                      end        end        if (NUM_RX_LANE == 4)        begin          always @(posedge dz711a3 or negedge reset_n_i)          begin              if (~reset_n_i)              begin                  lq76313 <= 0;                  hd32ded <= 0;                  fc86fc6 <= 4'd0;              end              else if (~ykc161d | ((hb7ea1f==0) & ~ww6d59c))              begin                  lq76313 <= 0;                  hd32ded <= 0;                  fc86fc6 <= 4'd0;              end              else if ((~hofe0c1 & (pub8464 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd0)))              begin                  lq76313 <= pub8464;                  hd32ded <= 1;                  fc86fc6 <= 4'd0;              end              else if ((~hofe0c1 & (ri11917 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd1)))              begin                  lq76313 <= ri11917;                  hd32ded <= 1;                  fc86fc6 <= 4'd1;              end              else if ((~hofe0c1 & (bl645d3 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd2)))              begin                  lq76313 <= bl645d3;                  hd32ded <= 1;                  fc86fc6 <= 4'd2;              end              else if ((~hofe0c1 & (kf174ff == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd3)))              begin                  lq76313 <= kf174ff;                  hd32ded <= 1;                  fc86fc6 <= 4'd3;              end              else if ((~hofe0c1 & (ipd3fe7 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd4)))              begin                  lq76313 <= ipd3fe7;                  hd32ded <= 1;                  fc86fc6 <= 4'd4;              end              else if ((~hofe0c1 & (qgff9ed == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd5)))              begin                  lq76313 <= qgff9ed;                  hd32ded <= 1;                  fc86fc6 <= 4'd5;              end              else if ((~hofe0c1 & (gbe7b47 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd6)))              begin                  lq76313 <= gbe7b47;                  hd32ded <= 1;                  fc86fc6 <= 4'd6;              end              else if ((~hofe0c1 & (ened1ef == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd7)))              begin                  lq76313 <= ened1ef;                  hd32ded <= 1;                  fc86fc6 <= 4'd7;              end              else if ((~hofe0c1 & (by47be8 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd8)))              begin                  lq76313 <= by47be8;                  hd32ded <= 1;                  fc86fc6 <= 4'd8;              end              else if ((~hofe0c1 & (qgefa17 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd9)))              begin                  lq76313 <= qgefa17;                  hd32ded <= 1;                  fc86fc6 <= 4'd9;              end              else if ((~hofe0c1 & (yxe85c8 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd10)))              begin                  lq76313 <= yxe85c8;                  hd32ded <= 1;                  fc86fc6 <= 4'd10;              end              else if ((~hofe0c1 & (wl1722a == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd11)))              begin                  lq76313 <= wl1722a;                  hd32ded <= 1;                  fc86fc6 <= 4'd11;              end              else if ((~hofe0c1 & (vvc8aa0 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd12)))              begin                  lq76313 <= vvc8aa0;                  hd32ded <= 1;                  fc86fc6 <= 4'd12;              end              else if ((~hofe0c1 & (do2a83e == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd13)))              begin                  lq76313 <= do2a83e;                  hd32ded <= 1;                  fc86fc6 <= 4'd13;              end              else if ((~hofe0c1 & (zza0f9d == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd14)))              begin                  lq76313 <= zza0f9d;                  hd32ded <= 1;                  fc86fc6 <= 4'd14;              end              else if ((~hofe0c1 & (co3e774 == yx70ded)) | (hofe0c1 & (hb7ea1f == 4'd15)))              begin                  lq76313 <= co3e774;                  hd32ded <= 1;                  fc86fc6 <= 4'd15;              end                      end        end    end
endgenerate

always@* begin db37b6a<=twe0f4[0];xybdb56<=twe0f4[1];kdedab3<=twe0f4[2];ww6d59c<=twe0f4[3];cm5670d<={dmf100a>>1,twe0f4[4]};je9c340<={bl40290>>1,twe0f4[5]};cbd01a<={uka432>>1,twe0f4[6]};fn406a1<={kf90c8a>>1,twe0f4[7]};rv350e<=twe0f4[8];ks1a877<=twe0f4[9];sud43b9<=twe0f4[10];hqee4c<={thddc4b>>1,twe0f4[11]};oub9311<={jcee25e>>1,twe0f4[12]};ay4c445<={rt712f2>>1,twe0f4[13]};xy11140<={fc89796>>1,twe0f4[14]};th45019<={uv4bcb2>>1,twe0f4[15]};th40677<={kd5e594>>1,twe0f4[16]};zz19df7<={qtf2ca4>>1,twe0f4[17]};kq77df0<={xy96524>>1,twe0f4[18]};uvf7c04<={lf94912>>1,twe0f4[19]};mef0125<={uxa4896>>1,twe0f4[20]};tw4945<={uk244b4>>1,twe0f4[21]};ri25158<={bn225a1>>1,twe0f4[22]};vv4561e<={an12d0e>>1,twe0f4[23]};ne587b0<={ng96875>>1,twe0f4[24]};pu1ec1c<={ohb43ab>>1,twe0f4[25]};zzb071f<={ira1d5c>>1,twe0f4[26]};jr1c7f2<={en75722>>1,twe0f4[27]};uk1fcbf<={gdab914>>1,twe0f4[28]};uvf2fcb<={ui5c8a5>>1,twe0f4[29]};fpbf2e1<={rge4528>>1,twe0f4[30]};eacb87e<={db22943>>1,twe0f4[31]};tue1f81<={tw14a1f>>1,twe0f4[32]};zx7e050<={hda50fa>>1,twe0f4[33]};lf81438<={bn287d7>>1,twe0f4[34]};nr50e31<={wy1f5f8>>1,twe0f4[35]};tj38c71<={gofafc0>>1,twe0f4[36]};ks31c7d<={bld7e00>>1,twe0f4[37]};pf71f4f<={xlbf007>>1,twe0f4[38]};ic7d3fc<={kdf803f>>1,twe0f4[39]};dz4ff06<={fac01fc>>1,twe0f4[40]};ldfc1b4<={oufe2>>1,twe0f4[41]};lf6d30<={oh7f11>>1,twe0f4[42]};sjb4c34<={zxfc462>>1,twe0f4[43]};pu30d28<={wje2316>>1,twe0f4[44]};wy34a1a<={ls118b4>>1,twe0f4[45]};ph2868f<={tw8c5a2>>1,twe0f4[46]};mg1a3f9<={ay62d12>>1,twe0f4[47]};qv8fe40<={xl16891>>1,twe0f4[48]};pff9025<={qvb448f>>1,twe0f4[49]};th40976<={xya247c>>1,twe0f4[50]};ng25dbb<={ph91f14>>1,twe0f4[51]};xw76ed1<={an8f8a6>>1,twe0f4[52]};mtbb453<={fa7c534>>1,twe0f4[53]};ead14ea<={she29a2>>1,twe0f4[54]};me53a8d<={je14d15>>1,twe0f4[55]};wwea349<={coa68aa>>1,twe0f4[56]};gq8d244<={ks34551>>1,twe0f4[57]};go49103<={baa2a88>>1,twe0f4[58]};sh440c3<={fpaa219>>1,twe0f4[59]};nt30e3<={kd510ce>>1,twe0f4[60]};ofc38fd<={ou88675>>1,twe0f4[61]};dze3f67<={me433a8>>1,twe0f4[62]};gbfd9f9<={zz19d41>>1,twe0f4[63]};ic67e6e<={eacea0e>>1,twe0f4[64]};nrf9b8b<={mr75070>>1,twe0f4[65]};fn6e2ff<={ria8384>>1,twe0f4[66]};lf8bff6<={bae11d>>1,twe0f4[67]};wwffdb7<={sh708eb>>1,twe0f4[68]};hbf6dc2<={tj8475d>>1,twe0f4[69]};pub70b0<={yz23aee>>1,twe0f4[70]};blc2c1a<={gd1d775>>1,twe0f4[71]};vxb06b6<={neebbad>>1,twe0f4[72]};ou1adb3<={zk5dd6b>>1,twe0f4[73]};mgb6ccd<={faeeb5a>>1,twe0f4[74]};aab3341<={lsad69d>>1,twe0f4[75]};nrcd04a<={ld6b4eb>>1,twe0f4[76]};gb412b1<={hb5a75e>>1,twe0f4[77]};zx4ac66<={aa9d7b5>>1,twe0f4[78]};epb19b0<={rgebda9>>1,twe0f4[79]};dm66c2b<={gb5ed4b>>1,twe0f4[80]};jrb0add<={rvb52ee>>1,twe0f4[81]};ks2b77c<={eca9776>>1,twe0f4[82]};dzddf05<={gb4bbb1>>1,twe0f4[83]};by7c171<={vieec62>>1,twe0f4[84]};sw5c50<={lq76313>>1,twe0f4[85]};ld71408<={ohb189b>>1,twe0f4[86]};nr50235<={os626ea>>1,twe0f4[87]};sj8d7e<={tj9ba86>>1,twe0f4[88]};vk35fa8<={goea1bf>>1,twe0f4[89]};hb7ea1f<={fc86fc6>>1,twe0f4[90]};gof50fe<=twe0f4[91];vka87f0<=twe0f4[92];kq43f83<=twe0f4[93];co1fc18<=twe0f4[94];hofe0c1<=twe0f4[95];kqf060b<=twe0f4[96];ba83058<=twe0f4[97];oh182c3<=twe0f4[98];ykc161d<=twe0f4[99];lsb0e8<={nr6e69c>>1,twe0f4[100]};tu58743<={vi734e6>>1,twe0f4[101]};ofc3a1b<={qv9a733>>1,twe0f4[102]};kf1d0dc<={mrd399c>>1,twe0f4[103]};cm4372d<={dze672a>>1,twe0f4[104]};endcb4b<={qv33956>>1,twe0f4[105]};hd2d2e0<={xy9cab4>>1,twe0f4[106]};yx4b83b<={ose55a2>>1,twe0f4[107]};yke0ee1<={do2ad11>>1,twe0f4[108]};uk3b845<={ww5688b>>1,twe0f4[109]};dme1145<={irb4459>>1,twe0f4[110]};pf4515d<={lsa22cc>>1,twe0f4[111]};th45776<={xl8b313>>1,twe0f4[112]};tu5ddb1<={kq5989f>>1,twe0f4[113]};tu76c53<={qtcc4f8>>1,twe0f4[114]};irb14d1<={cm627c4>>1,twe0f4[115]};ay53465<={jr13e20>>1,twe0f4[116]};osd1944<={ir9f107>>1,twe0f4[117]};qt65103<={alf883c>>1,twe0f4[118]};ip440ee<={goc41e5>>1,twe0f4[119]};xl3ba3<={ux7942>>1,twe0f4[120]};tuee8f4<={gd3ca14>>1,twe0f4[121]};aaa3d1e<={cme50a5>>1,twe0f4[122]};dmf478b<={nt28529>>1,twe0f4[123]};pu1e2d1<={zk4294f>>1,twe0f4[124]};zz8b452<={tw14a7a>>1,twe0f4[125]};kqd14be<={hda53d2>>1,twe0f4[126]};ho52f8d<={an29e97>>1,twe0f4[127]};mtbe359<={mr7a5e7>>1,twe0f4[128]};uk8d66b<={bld2f3d>>1,twe0f4[129]};ea59ac6<={uk979ef>>1,twe0f4[130]};th6b186<={qibcf79>>1,twe0f4[131]};uvc61b2<={gbe7bc9>>1,twe0f4[132]};xy86cab<={tj3de4d>>1,twe0f4[133]};jeb2ad5<={cmef26f>>1,twe0f4[134]};sjab555<={lq79378>>1,twe0f4[135]};byd5567<={rg4de15>>1,twe0f4[136]};dz559df<={qt6f0ab>>1,twe0f4[137]};qg677f0<={su7855c>>1,twe0f4[138]};lqdfc00<={thc2ae0>>1,twe0f4[139]};osf001b<={wy15706>>1,twe0f4[140]};mg6c4<={irab831>>1,twe0f4[141]};ri1b107<={kq5c18d>>1,twe0f4[142]};ykc41d6<={sue0c69>>1,twe0f4[143]};cb7582<={ie31a47>>1,twe0f4[144]};qtd60aa<={ou8d239>>1,twe0f4[145]};sw82aa6<={ne691c8>>1,twe0f4[146]};xlaa981<={zk48e43>>1,twe0f4[147]};yma607c<={by4721b>>1,twe0f4[148]};jr81f02<={oh390db>>1,twe0f4[149]};ps7c0b8<={nrc86dc>>1,twe0f4[150]};kf2e11<={ea436e6>>1,twe0f4[151]};pub8464<={wwdb98a>>1,twe0f4[
152]};ri11917<={mrdcc51>>1,twe0f4[153]};bl645d3<={hbe628c>>1,twe0f4[154]};kf174ff<={uk31466>>1,twe0f4[155]};ipd3fe7<={ep8a330>>1,twe0f4[156]};qgff9ed<={qt51985>>1,twe0f4[157]};gbe7b47<={hq8cc2c>>1,twe0f4[158]};ened1ef<={ne66163>>1,twe0f4[159]};by47be8<={kf858d3>>1,twe0f4[160]};qgefa17<={ir2c69d>>1,twe0f4[161]};yxe85c8<={lq634ed>>1,twe0f4[162]};wl1722a<={aa1a76a>>1,twe0f4[163]};vvc8aa0<={ofd3b50>>1,twe0f4[164]};do2a83e<={uk9da85>>1,twe0f4[165]};zza0f9d<={shed428>>1,twe0f4[166]};co3e774<={of6a145>>1,twe0f4[167]};zxf3ba1<=twe0f4[168];qi9dd0e<=twe0f4[169];lqee870<=twe0f4[170];ld74383<=twe0f4[171];end
always@* begin kfa1c1e[2047]<=cm468f1;kfa1c1e[2046]<=qi34788;kfa1c1e[2044]<=wya3c40;kfa1c1e[2040]<=dmf100a[0];kfa1c1e[2032]<=bl40290[0];kfa1c1e[2017]<=uka432[0];kfa1c1e[2013]<=lsa22cc[0];kfa1c1e[1990]<=tj3de4d[0];kfa1c1e[1987]<=kf90c8a[0];kfa1c1e[1980]<=qvb448f[0];kfa1c1e[1979]<=xl8b313[0];kfa1c1e[1963]<=hda50fa[0];kfa1c1e[1957]<=gd3ca14[0];kfa1c1e[1942]<=she29a2[0];kfa1c1e[1932]<=cmef26f[0];kfa1c1e[1929]<=of6a145[0];kfa1c1e[1926]<=dzcd0dd;kfa1c1e[1923]<=hq8cc2c[0];kfa1c1e[1921]<=an12d0e[0];kfa1c1e[1914]<=ir9f107[0];kfa1c1e[1913]<=xya247c[0];kfa1c1e[1911]<=kq5989f[0];kfa1c1e[1903]<=oh7f11[0];kfa1c1e[1879]<=bn287d7[0];kfa1c1e[1876]<=goea1bf[0];kfa1c1e[1872]<=mr75070[0];kfa1c1e[1866]<=cme50a5[0];kfa1c1e[1837]<=je14d15[0];kfa1c1e[1816]<=lq79378[0];kfa1c1e[1810]<=fn50a2c;kfa1c1e[1805]<=cm686ee;kfa1c1e[1799]<=ne66163[0];kfa1c1e[1795]<=ng96875[0];kfa1c1e[1783]<=tw8c5a2[0];kfa1c1e[1780]<=alf883c[0];kfa1c1e[1778]<=ph91f14[0];kfa1c1e[1775]<=qtcc4f8[0];kfa1c1e[1770]<=me433a8[0];kfa1c1e[1758]<=zxfc462[0];kfa1c1e[1710]<=wy1f5f8[0];kfa1c1e[1704]<=fc86fc6[0];kfa1c1e[1696]<=ria8384[0];kfa1c1e[1685]<=nt28529[0];kfa1c1e[1679]<=kd5e594[0];kfa1c1e[1627]<=coa68aa[0];kfa1c1e[1584]<=rg4de15[0];kfa1c1e[1573]<=yz85166;kfa1c1e[1567]<=qv33956[0];kfa1c1e[1562]<=os43771;kfa1c1e[1557]<=by4721b[0];kfa1c1e[1551]<=kf858d3[0];kfa1c1e[1548]<=irab831[0];kfa1c1e[1543]<=ohb43ab[0];kfa1c1e[1521]<=qibcf79[0];kfa1c1e[1519]<=ay62d12[0];kfa1c1e[1513]<=goc41e5[0];kfa1c1e[1509]<=an8f8a6[0];kfa1c1e[1504]<=ep8a330[0];kfa1c1e[1502]<=cm627c4[0];kfa1c1e[1499]<=fac01fc[0];kfa1c1e[1493]<=os626ea[0];kfa1c1e[1492]<=zz19d41[0];kfa1c1e[1469]<=wje2316[0];kfa1c1e[1466]<=kd510ce[0];kfa1c1e[1415]<=mrd399c[0];kfa1c1e[1404]<=bld2f3d[0];kfa1c1e[1400]<=hbe628c[0];kfa1c1e[1398]<=xlbf007[0];kfa1c1e[1377]<=vi734e6[0];kfa1c1e[1373]<=gofafc0[0];kfa1c1e[1361]<=rv37e32;kfa1c1e[1355]<=gb5ed4b[0];kfa1c1e[1349]<=mrf8cb7;kfa1c1e[1344]<=bae11d[0];kfa1c1e[1326]<=eca9776[0];kfa1c1e[1323]<=zk4294f[0];kfa1c1e[1310]<=qtf2ca4[0];kfa1c1e[1301]<=hd32ded;kfa1c1e[1280]<=tj8475d[0];kfa1c1e[1210]<=vieec62[0];kfa1c1e[1207]<=ks34551[0];kfa1c1e[1199]<=hda53d2[0];kfa1c1e[1144]<=lf94912[0];kfa1c1e[1120]<=qt6f0ab[0];kfa1c1e[1110]<=lsb7b73;kfa1c1e[1098]<=nt28b34;kfa1c1e[1086]<=xy9cab4[0];kfa1c1e[1076]<=thddc4b[0];kfa1c1e[1067]<=oh390db[0];kfa1c1e[1054]<=ir2c69d[0];kfa1c1e[1048]<=kq5c18d[0];kfa1c1e[1039]<=ira1d5c[0];kfa1c1e[1026]<=gd1d775[0];kfa1c1e[1023]<=wy88d1e;kfa1c1e[1006]<=irb4459[0];kfa1c1e[995]<=gbe7bc9[0];kfa1c1e[990]<=xl16891[0];kfa1c1e[981]<=tw14a1f[0];kfa1c1e[978]<=ux7942[0];kfa1c1e[971]<=fa7c534[0];kfa1c1e[964]<=shed428[0];kfa1c1e[961]<=qt51985[0];kfa1c1e[960]<=bn225a1[0];kfa1c1e[957]<=jr13e20[0];kfa1c1e[951]<=oufe2[0];kfa1c1e[938]<=tj9ba86[0];kfa1c1e[936]<=eacea0e[0];kfa1c1e[891]<=ls118b4[0];kfa1c1e[885]<=ou88675[0];kfa1c1e[839]<=uv4bcb2[0];kfa1c1e[783]<=dze672a[0];kfa1c1e[778]<=zk48e43[0];kfa1c1e[774]<=wy15706[0];kfa1c1e[760]<=uk979ef[0];kfa1c1e[752]<=uk31466[0];kfa1c1e[749]<=kdf803f[0];kfa1c1e[746]<=ohb189b[0];kfa1c1e[733]<=fpaa219[0];kfa1c1e[707]<=qv9a733[0];kfa1c1e[702]<=mr7a5e7[0];kfa1c1e[700]<=mrdcc51[0];kfa1c1e[699]<=bld7e00[0];kfa1c1e[688]<=nr6e69c[0];kfa1c1e[677]<=rgebda9[0];kfa1c1e[674]<=hdbf196;kfa1c1e[663]<=rvb52ee[0];kfa1c1e[650]<=alc65bd;kfa1c1e[640]<=sh708eb[0];kfa1c1e[605]<=gb4bbb1[0];kfa1c1e[599]<=tw14a7a[0];kfa1c1e[572]<=xy96524[0];kfa1c1e[555]<=do96f6e;kfa1c1e[513]<=yz23aee[0];kfa1c1e[503]<=ww5688b[0];kfa1c1e[490]<=db22943[0];kfa1c1e[482]<=uk9da85[0];kfa1c1e[480]<=uk244b4[0];kfa1c1e[419]<=fc89796[0];kfa1c1e[389]<=ne691c8[0];kfa1c1e[387]<=thc2ae0[0];kfa1c1e[373]<=lq76313[0];kfa1c1e[366]<=baa2a88[0];kfa1c1e[351]<=an29e97[0];kfa1c1e[350]<=wwdb98a[0];kfa1c1e[344]<=czedcd3;kfa1c1e[338]<=aa9d7b5[0];kfa1c1e[251]<=do2ad11[0];kfa1c1e[245]<=rge4528[0];kfa1c1e[241]<=ofd3b50[0];kfa1c1e[240]<=uxa4896[0];kfa1c1e[209]<=rt712f2[0];kfa1c1e[194]<=ou8d239[0];kfa1c1e[193]<=su7855c[0];kfa1c1e[175]<=ea436e6[0];kfa1c1e[172]<=jebdb9a;kfa1c1e[169]<=hb5a75e[0];kfa1c1e[149]<=xj459a6;kfa1c1e[125]<=ose55a2[0];kfa1c1e[122]<=ui5c8a5[0];kfa1c1e[120]<=aa1a76a[0];kfa1c1e[104]<=jcee25e[0];kfa1c1e[97]<=ie31a47[0];kfa1c1e[87]<=nrc86dc[0];kfa1c1e[84]<=ld6b4eb[0];kfa1c1e[61]<=gdab914[0];kfa1c1e[60]<=lq634ed[0];kfa1c1e[48]<=sue0c69[0];kfa1c1e[42]<=lsad69d[0];kfa1c1e[30]<=en75722[0];kfa1c1e[21]<=faeeb5a[0];kfa1c1e[10]<=zk5dd6b[0];kfa1c1e[5]<=neebbad[0];end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule
















































`timescale 1 ns / 100 ps
module fp27b5a #(
	parameter NUM_RX_LANE = 4,	parameter RX_GEAR = 16,        parameter FIFO_DEPTH = 16,        parameter FIFO_TYPE0 = "EBR",        parameter FIFO_TYPE1 = "EBR",        parameter FIFO_TYPE2 = "EBR",        parameter FIFO_TYPE3 = "EBR"
)
(
    input  wire                          pseeff5,
    input  wire                          os77fab,
    input  wire [RX_GEAR-1:0]             dmf100a,
    input  wire [RX_GEAR-1:0]             bl40290,
    input  wire [RX_GEAR-1:0]             uka432,
    input  wire [RX_GEAR-1:0]             kf90c8a,
    input  wire                           tj8457c,
    input  wire                           zz22be6,
    input  wire                           mg15f37,
    input  wire                           dbaf9b8,
    input  wire                           xw7cdc7,

    output wire [RX_GEAR-1:0]             bd0_o,
    output wire [RX_GEAR-1:0]             bd1_o,
    output wire [RX_GEAR-1:0]             bd2_o,
    output wire [RX_GEAR-1:0]             bd3_o,
    output wire                           hs_sync_o
);
reg       qtf8652;
reg       czc3294, xl194a5;
reg [9:0] tuca52f;
reg [RX_GEAR - 1 : 0] cm5670d;
reg [RX_GEAR - 1 : 0] je9c340;
reg [RX_GEAR - 1 : 0] cbd01a;
reg [RX_GEAR - 1 : 0] fn406a1;
reg hqb2e4f;
reg co9727a;
reg ymb93d0;
reg ofc9e80;
reg th4f405;
reg gb7a02f;
reg dmd017d;
reg [9 : 0] mt80beb;
reg [2047:0] kfa1c1e;
wire [11:0] twe0f4;





localparam gb707a3 = 12,vk83d1c = 32'hfdffc68b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;




always @(posedge os77fab or posedge pseeff5) begin    if(pseeff5) begin        tuca52f <= 0;    end    else begin        tuca52f <= {mt80beb[8:0], th4f405};    end
end

assign  hs_sync_o = mt80beb[6];

always @(posedge os77fab or posedge pseeff5) begin    if (pseeff5) begin        qtf8652 = 1'b1;    end    else if (!mt80beb[7] & mt80beb[9]) begin        qtf8652 = 1'b1;    end    else begin        qtf8652 = 1'b0;    end
end

pmi_fifo_dc #(    .pmi_data_width_w       (RX_GEAR),    .pmi_data_width_r       (RX_GEAR),    .pmi_data_depth_w       (FIFO_DEPTH),    .pmi_data_depth_r       (FIFO_DEPTH),    .pmi_full_flag          (FIFO_DEPTH),    .pmi_empty_flag         (0),    .pmi_almost_full_flag   (FIFO_DEPTH-1),    .pmi_almost_empty_flag  (1),    .pmi_regmode            ("reg"),    .pmi_resetmode          ("async"),    .pmi_family             ("LIFDB1"),    .module_type            ("pmi_fifo_dc"),    .pmi_implementation     (FIFO_TYPE0)
)
wl260bc (    .Data         (dmf100a),    .WrClock      (os77fab),    .RdClock      (os77fab),    .WrEn         (tj8457c),    .RdEn         (tuca52f[3]),    .Reset        (qtf8652),    .RPReset      (1'b0),    .Q            (bd0_o),    .Empty        (),    .Full         (),    .AlmostEmpty  (),    .AlmostFull   ()
);

generate
if (NUM_RX_LANE > 1) begin  pmi_fifo_dc #(      .pmi_data_width_w       (RX_GEAR),      .pmi_data_width_r       (RX_GEAR),      .pmi_data_depth_w       (FIFO_DEPTH),      .pmi_data_depth_r       (FIFO_DEPTH),      .pmi_full_flag          (FIFO_DEPTH),      .pmi_empty_flag         (0),      .pmi_almost_full_flag   (FIFO_DEPTH-1),      .pmi_almost_empty_flag  (1),      .pmi_regmode            ("reg"),      .pmi_resetmode          ("async"),      .pmi_family             ("LIFDB1"),      .module_type            ("pmi_fifo_dc"),      .pmi_implementation     (FIFO_TYPE1)  )  ld643d4 (      .Data         (bl40290),      .WrClock      (os77fab),      .RdClock      (os77fab),      .WrEn         (zz22be6),      .RdEn         (tuca52f[3]),      .Reset        (qtf8652),      .RPReset      (1'b0),      .Q            (bd1_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd1_o = {RX_GEAR{1'b0}};
end
endgenerate

generate
if (NUM_RX_LANE > 2) begin  pmi_fifo_dc #(      .pmi_data_width_w       (RX_GEAR),      .pmi_data_width_r       (RX_GEAR),      .pmi_data_depth_w       (FIFO_DEPTH),      .pmi_data_depth_r       (FIFO_DEPTH),      .pmi_full_flag          (FIFO_DEPTH),      .pmi_empty_flag         (0),      .pmi_almost_full_flag   (FIFO_DEPTH-1),      .pmi_almost_empty_flag  (1),      .pmi_regmode            ("reg"),      .pmi_resetmode          ("async"),      .pmi_family             ("LIFDB1"),      .module_type            ("pmi_fifo_dc"),      .pmi_implementation     (FIFO_TYPE2)  )  epaea1b (      .Data         (uka432),      .WrClock      (os77fab),      .RdClock      (os77fab),      .WrEn         (mg15f37),      .RdEn         (tuca52f[3]),      .Reset        (qtf8652),      .RPReset      (1'b0),      .Q            (bd2_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd2_o = {RX_GEAR{1'b0}};
end
endgenerate

generate
if (NUM_RX_LANE > 3) begin  pmi_fifo_dc #(      .pmi_data_width_w       (RX_GEAR),      .pmi_data_width_r       (RX_GEAR),      .pmi_data_depth_w       (FIFO_DEPTH),      .pmi_data_depth_r       (FIFO_DEPTH),      .pmi_full_flag          (FIFO_DEPTH),      .pmi_empty_flag         (0),      .pmi_almost_full_flag   (FIFO_DEPTH-1),      .pmi_almost_empty_flag  (1),      .pmi_regmode            ("reg"),      .pmi_resetmode          ("async"),      .pmi_family             ("LIFDB1"),      .module_type            ("pmi_fifo_dc"),      .pmi_implementation     (FIFO_TYPE3)  )  rg766f7 (      .Data         (kf90c8a),      .WrClock      (os77fab),      .RdClock      (os77fab),      .WrEn         (dbaf9b8),      .RdEn         (tuca52f[3]),      .Reset        (qtf8652),      .RPReset      (1'b0),      .Q            (bd3_o),      .Empty        (),      .Full         (),      .AlmostEmpty  (),      .AlmostFull   ()  );
end
else begin  assign bd3_o = {RX_GEAR{1'b0}};
end
endgenerate

always@* begin cm5670d<={dmf100a>>1,twe0f4[0]};je9c340<={bl40290>>1,twe0f4[1]};cbd01a<={uka432>>1,twe0f4[2]};fn406a1<={kf90c8a>>1,twe0f4[3]};hqb2e4f<=twe0f4[4];co9727a<=twe0f4[5];ymb93d0<=twe0f4[6];ofc9e80<=twe0f4[7];th4f405<=twe0f4[8];gb7a02f<=twe0f4[9];dmd017d<=twe0f4[10];mt80beb<={tuca52f>>1,twe0f4[11]};end
always@* begin kfa1c1e[2047]<=bl40290[0];kfa1c1e[2046]<=uka432[0];kfa1c1e[2044]<=kf90c8a[0];kfa1c1e[2040]<=tj8457c;kfa1c1e[2032]<=zz22be6;kfa1c1e[2017]<=mg15f37;kfa1c1e[1987]<=dbaf9b8;kfa1c1e[1926]<=xw7cdc7;kfa1c1e[1805]<=czc3294;kfa1c1e[1562]<=xl194a5;kfa1c1e[1076]<=tuca52f[0];kfa1c1e[1023]<=dmf100a[0];end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule












































`timescale 1 ns / 100 ps
module zz13471 #(
    parameter     RX_GEAR = 16
)
(
    input wire                reset_n_i,
    inout wire                bn8e3a0,
    inout wire                th71d07,
    input wire                bn8e83f,
    input wire                pf741fe,
    input wire                rva0ff6,
    input wire                yz7fb6,

    input wire                ls3fdb4, 
    input wire                dz711a3, 

    output wire [RX_GEAR-1:0] mgb6896,

    output wire               sjb44b0,
    output wire               nga2584,
    output wire               sj12c22
);
wire   ba96115, tjb08aa;
wire   bn84557 = ~(~bn8e83f & pf741fe);
reg vxaafb9;
reg lq57dcf;
reg yzbee7b;
reg off73dc;
reg ksb9ee5;
reg jccf729;
reg fn7b94b;
reg shdca5e;
reg [2047:0] kfa1c1e;
wire [7:0] twe0f4;





localparam gb707a3 = 8,vk83d1c = 32'hfdffca8b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;

assign sj12c22 = sjb44b0 | nga2584;


MIPI lf3923 (    .AP    (rva0ff6),    .AN    (yz7fb6),    .TP    (bn84557),    .TN    (bn84557),    .HSSEL (bn8e83f),    .BP    (bn8e3a0),    .BN    (th71d07),    .OLSP  (sjb44b0),    .OLSN  (nga2584),    .OHS   (ba96115)
);
DELAYG #(    .DEL_MODE  ("ECLK_CENTERED_MIPI")    )
jp5f787 (    .A     (ba96115),    .Z     (tjb08aa)
);
generate    if (RX_GEAR == 8)	begin : th7e2df        IDDRX4C ie3e408 (            .D        (tjb08aa),            .ECLK     (ls3fdb4),            .SCLK     (dz711a3),            .RST      (~reset_n_i),            .ALIGNWD  (1'b0),            .Q0       (mgb6896[0]),            .Q1       (mgb6896[1]),            .Q2       (mgb6896[2]),            .Q3       (mgb6896[3]),            .Q4       (mgb6896[4]),            .Q5       (mgb6896[5]),            .Q6       (mgb6896[6]),            .Q7       (mgb6896[7])        );    end    else if (RX_GEAR == 16)	begin : ls3a47b        IDDRX8A tufee12 (            .D        (tjb08aa),            .ECLK     (ls3fdb4),            .SCLK     (dz711a3),            .RST      (~reset_n_i),            .ALIGNWD  (1'b0),            .Q0       (mgb6896[0]),            .Q1       (mgb6896[1]),            .Q2       (mgb6896[2]),            .Q3       (mgb6896[3]),            .Q4       (mgb6896[4]),            .Q5       (mgb6896[5]),            .Q6       (mgb6896[6]),            .Q7       (mgb6896[7]),            .Q8       (mgb6896[8]),            .Q9       (mgb6896[9]),            .Q10      (mgb6896[10]),            .Q11      (mgb6896[11]),            .Q12      (mgb6896[12]),            .Q13      (mgb6896[13]),            .Q14      (mgb6896[14]),            .Q15      (mgb6896[15])        );    end
endgenerate
always@* begin vxaafb9<=twe0f4[0];lq57dcf<=twe0f4[1];yzbee7b<=twe0f4[2];off73dc<=twe0f4[3];ksb9ee5<=twe0f4[4];jccf729<=twe0f4[5];fn7b94b<=twe0f4[6];shdca5e<=twe0f4[7];end
always@* begin kfa1c1e[2047]<=bn8e83f;kfa1c1e[2046]<=pf741fe;kfa1c1e[2044]<=rva0ff6;kfa1c1e[2040]<=yz7fb6;kfa1c1e[2032]<=ls3fdb4;kfa1c1e[2017]<=dz711a3;kfa1c1e[1987]<=bn84557;kfa1c1e[1023]<=reset_n_i;end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule












































`timescale 1 ns / 100 ps
module ir3ca28 #(
    parameter     RX_GEAR = 16
)
(
    input wire    reset_n_i,
    inout wire    clk_p_i,
    inout wire    clk_n_i,
    input wire    bn8e83f,

    output wire   clk_byte_o,

    output wire   sjb44b0,
    output wire   nga2584,
    output wire   sj12c22,
    output wire   gqb6910
);
wire  ba96115;
reg vxaafb9;
reg lq57dcf;
reg [2047:0] kfa1c1e;
wire [1:0] twe0f4;





localparam gb707a3 = 2,vk83d1c = 32'hfdffe06b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;

assign sj12c22 = sjb44b0 | nga2584;
MIPI lf3923 (    .AP    (1'b0),          .AN    (1'b0),          .TP    (1'b1),          .TN    (1'b1),          .HSSEL (bn8e83f),    .BP    (clk_p_i),    .BN    (clk_n_i),    .OLSP  (sjb44b0),    .OLSN  (nga2584),    .OHS   (ba96115)
);
ECLKSYNCB lsa88c4 (    .ECLKI  (ba96115),    .STOP   (~reset_n_i),    .ECLKO  (gqb6910)
);
generate    if (RX_GEAR == 16)        CLKDIVG #(            .DIV     ("8.0")        )        tj22920 (            .CLKI    (gqb6910),            .RST     (~reset_n_i),            .ALIGNWD (1'b0),            .CDIVX   (clk_byte_o)        );    else if (RX_GEAR == 8)        CLKDIVG #(            .DIV     ("4.0")        )        tj22920 (            .CLKI    (gqb6910),            .RST     (~reset_n_i),            .ALIGNWD (1'b0),            .CDIVX   (clk_byte_o)        );
endgenerate

always@* begin vxaafb9<=twe0f4[0];lq57dcf<=twe0f4[1];end
always@* begin kfa1c1e[2047]<=bn8e83f;kfa1c1e[1023]<=reset_n_i;end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule












































`timescale 1 ns / 100 ps
module kdc9dfd #(
    parameter     NUM_RX_LANE = 4,    parameter     RX_GEAR     = 16
)
(
    input wire                reset_n_i,
    inout wire                clk_p_i,
    inout wire                clk_n_i,
    inout wire                d0_p_io,	
    inout wire                d0_n_io,	
    inout wire                d1_p_i,	
    inout wire                d1_n_i,	
    inout wire                d2_p_i,	
    inout wire                d2_n_i,	
    inout wire                d3_p_i,	
    inout wire                d3_n_i,
    input wire                oh332f6,
    input wire                hs_d0_en_i,
    input wire                hs_d1_en_i,
    input wire                hs_d2_en_i,
    input wire                hs_d3_en_i,
    input wire                lp_d0_tx_en_i,
    input wire                lp_d0_tx_p_i,
    input wire                lp_d0_tx_n_i,

    output wire               clk_byte_o,
    output wire [RX_GEAR-1:0] bd0_o,
    output wire [RX_GEAR-1:0] bd1_o,
    output wire [RX_GEAR-1:0] bd2_o,
    output wire [RX_GEAR-1:0] bd3_o,

    output wire               lp_clk_rx_p_o,
    output wire               lp_clk_rx_n_o,
    output wire               lp_d0_rx_p_o,
    output wire               lp_d0_rx_n_o,
    output wire               lp_d1_rx_p_o,
    output wire               lp_d1_rx_n_o,
    output wire               lp_d2_rx_p_o,
    output wire               lp_d2_rx_n_o,
    output wire               lp_d3_rx_p_o,
    output wire               lp_d3_rx_n_o,
    output wire               cd_clk_o,
    output wire               cd_d0_o
);
wire   xw631d7;
reg vxaafb9;
reg thc75d4;
reg ba3aea7;
reg nrd753a;
reg lfba9d6;
reg med4eb6;
reg baa75b0;
reg zm3ad82;
reg wjd6c12;
reg [2047:0] kfa1c1e;
wire [8:0] twe0f4;






localparam gb707a3 = 9,vk83d1c = 32'hfdffca8b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;

ir3ca28 #(    .RX_GEAR      (RX_GEAR)    )
vidfe11 (	.reset_n_i    (vxaafb9),	.clk_p_i      (clk_p_i),	.clk_n_i      (clk_n_i),	.bn8e83f      (thc75d4),	.clk_byte_o   (clk_byte_o),	.sjb44b0    (lp_clk_rx_p_o),	.nga2584    (lp_clk_rx_n_o),	.sj12c22         (cd_clk_o),	.gqb6910       (xw631d7)
);
zz13471 #(    .RX_GEAR      (RX_GEAR)
)
cof714 (	.reset_n_i    (vxaafb9),	.bn8e3a0       (d0_p_io),	.th71d07       (d0_n_io),	.bn8e83f      (ba3aea7),	.pf741fe   (baa75b0),	.rva0ff6    (zm3ad82),	.yz7fb6    (wjd6c12),	.ls3fdb4       (xw631d7),	.dz711a3   (clk_byte_o),	.mgb6896     (bd0_o[RX_GEAR-1:0]),	.sjb44b0    (lp_d0_rx_p_o),	.nga2584    (lp_d0_rx_n_o),	.sj12c22         (cd_d0_o)
);
generate    if (NUM_RX_LANE > 1)    begin : kq5caff        zz13471 #(            .RX_GEAR      (RX_GEAR)        )        wwff04f (            .reset_n_i    (vxaafb9),            .bn8e3a0       (d1_p_i),            .th71d07       (d1_n_i),            .bn8e83f      (nrd753a),            .pf741fe   (1'b0),            .rva0ff6    (1'b0),            .yz7fb6    (1'b0),            .ls3fdb4       (xw631d7),            .dz711a3   (clk_byte_o),            .mgb6896     (bd1_o[RX_GEAR-1:0]),            .sjb44b0    (lp_d1_rx_p_o),            .nga2584    (lp_d1_rx_n_o),            .sj12c22         ()        );        if (NUM_RX_LANE > 2)        begin : sw97dd1            zz13471 #(                .RX_GEAR      (RX_GEAR)            )            ayd132f (                .reset_n_i    (vxaafb9),                .bn8e3a0       (d2_p_i),                .th71d07       (d2_n_i),                .bn8e83f      (lfba9d6),                .pf741fe   (1'b0),                .rva0ff6    (1'b0),                .yz7fb6    (1'b0),                .ls3fdb4       (xw631d7),                .dz711a3   (clk_byte_o),                .mgb6896     (bd2_o[RX_GEAR-1:0]),                .sjb44b0    (lp_d2_rx_p_o),                .nga2584    (lp_d2_rx_n_o),                .sj12c22         ()            );            if (NUM_RX_LANE == 4)            begin : gd7e4c                zz13471 #(                    .RX_GEAR      (RX_GEAR)                )                qg4c8f5 (                    .reset_n_i    (vxaafb9),                    .bn8e3a0       (d3_p_i),                    .th71d07       (d3_n_i),                    .bn8e83f      (med4eb6),                    .pf741fe   (1'b0),                    .rva0ff6    (1'b0),                    .yz7fb6    (1'b0),                    .ls3fdb4       (xw631d7),                    .dz711a3   (clk_byte_o),                    .mgb6896     (bd3_o[RX_GEAR-1:0]),                    .sjb44b0    (lp_d3_rx_p_o),                    .nga2584    (lp_d3_rx_n_o),                    .sj12c22         ()                );            end        end    end
endgenerate

always@* begin vxaafb9<=twe0f4[0];thc75d4<=twe0f4[1];ba3aea7<=twe0f4[2];nrd753a<=twe0f4[3];lfba9d6<=twe0f4[4];med4eb6<=twe0f4[5];baa75b0<=twe0f4[6];zm3ad82<=twe0f4[7];wjd6c12<=twe0f4[8];end
always@* begin kfa1c1e[2047]<=oh332f6;kfa1c1e[2046]<=hs_d0_en_i;kfa1c1e[2044]<=hs_d1_en_i;kfa1c1e[2040]<=hs_d2_en_i;kfa1c1e[2032]<=hs_d3_en_i;kfa1c1e[2017]<=lp_d0_tx_en_i;kfa1c1e[1987]<=lp_d0_tx_p_i;kfa1c1e[1926]<=lp_d0_tx_n_i;kfa1c1e[1023]<=reset_n_i;end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule























































`timescale 1 ns / 100 ps
module dphy_rx_wrap #(
    parameter     NUM_RX_LANE = 4,    parameter     RX_GEAR     = 16,    parameter     DPHY_RX_IP  = "LATTICE",    parameter     LANE_ALIGN  = "OFF",    parameter     RX_CLK_MODE = "HS_LP",    parameter     BYTECLK_MHZ = 111,    parameter     FIFO_DEPTH  = 16,    parameter     FIFO_TYPE0  = "EBR",    parameter     FIFO_TYPE1  = "EBR",    parameter     FIFO_TYPE2  = "EBR",    parameter     FIFO_TYPE3  = "EBR"
)
(
    input wire                reset_n_i,
    input wire                reset_byte_n_i,
    input wire                reset_byte_fr_n_i,
    input wire                clk_byte_fr_i,
    inout wire                clk_p_i,
    inout wire                clk_n_i,
    inout wire                d0_p_io,	
    inout wire                d0_n_io,	
    inout wire                d1_p_i,	
    inout wire                d1_n_i,	
    inout wire                d2_p_i,	
    inout wire                d2_n_i,	
    inout wire                d3_p_i,	
    inout wire                d3_n_i,
    input wire                term_clk_en_i,
    input wire                term_d0_en_i,
    input wire                term_d1_en_i,
    input wire                term_d2_en_i,
    input wire                term_d3_en_i,
    input wire                hs_d0_en_i,
    input wire                hs_d1_en_i,
    input wire                hs_d2_en_i,
    input wire                hs_d3_en_i,
    input wire                lp_d0_tx_en_i,
    input wire                lp_d0_tx_p_i,
    input wire                lp_d0_tx_n_i,

    output wire               clk_hs_o,
    output wire               clk_byte_o,
    output wire [RX_GEAR-1:0] bd0_o,
    output wire [RX_GEAR-1:0] bd1_o,
    output wire [RX_GEAR-1:0] bd2_o,
    output wire [RX_GEAR-1:0] bd3_o,
    output wire               hs_sync_o,       

    output wire               lp_clk_rx_p_o,
    output wire               lp_clk_rx_n_o,
    output wire               lp_d0_rx_p_o,
    output wire               lp_d0_rx_n_o,
    output wire               lp_d1_rx_p_o,
    output wire               lp_d1_rx_n_o,
    output wire               lp_d2_rx_p_o,
    output wire               lp_d2_rx_n_o,
    output wire               lp_d3_rx_p_o,
    output wire               lp_d3_rx_n_o,
    output wire               cd_clk_o,
    output wire               cd_d0_o
);
reg                    hs_d0_en_r, hs_d1_en_r, hs_d2_en_r, hs_d3_en_r;
reg                    ri3ab92, jcd5c92, epae492, ay72494;
reg                    co924a1, ym92508, sw92840, db94201;
reg                    mta100f, oh807d, pf403ec, ri1f66;
reg                    ksfb33, go7d998, fneccc1, jc6660e;
reg                    mt33072, uk98395, uic1ca9, jee549;
reg                    cm72a4b, qv95258, ksa92c5, ay49629;
reg [1:0]              gb4b148, fa58a45;
reg [1:0]              byc522a, kf29152;
reg [1:0]              by48a95, th454ab;
reg [1:0]              xy2a55e, xw52af2;
reg [RX_GEAR-1:0]      mtabc9d, sh5e4ed, czf276c, tw93b65;
reg [RX_GEAR-1:0]      aled958, vi6cac4, ip65622, gq2b115;
reg [RX_GEAR-1:0]      suc4542, rv22a10, aa15087, nga8439;
reg [RX_GEAR-1:0]      wy10e5b, co872d8, wl396c1, wwcb60c;
reg [RX_GEAR-1:0]      vvd830c, cmc1867, xlc339, jp619ce;
reg                    do96f6e;
reg [3:0]              nr6e69c;
wire                   ep39db8, mecedc5, xw76e28, bab7142;
wire                   lsb8a13, rgc509b, jr284da, tu426d7;
wire [1:0]             db136bb, jr9b5de;
wire [1:0]             hodaef6, xjd77b3;
wire [1:0]             mtbbd9e, uidecf4;
wire                   xjf67a1, ecb3d0f, hd9e878, vif43c7;
wire                   mta1e3a;
wire                   ief1d4, ui78ea1, nrc7509;
wire                   fc3a84f;
wire [RX_GEAR-1:0]     mta13d1;
wire                   ph9e8d, bl4f46f, sh7a37f;
wire                   uid1bfd, mg8dfe8;
wire [3:0]             cz6ff41, qt7fa0d, czfd06c;
wire [RX_GEAR-1:0]     en41b25, mtd92d, by6c96d, fn64b6a;
wire [15:0]            fc25b56, hd2dab2, yk6d596, kd6acb1;
wire [RX_GEAR-1:0]     jeb2c68, tw96342, gdb1a12, ym8d095;
wire [RX_GEAR-1:0]     ho42541, kf12a0b, qv9505d, lsa82ed;
wire [RX_GEAR-1:0]     dobb5c, dm5dae2, mred712, th6b895;
wire [RX_GEAR-1:0]     wje2579, mt12bcc, gd95e65, hdaf32c;
wire                   zk79966;
wire                   alccb33, kd6599d, ux2ccec, zk66764;
localparam  ir2cd37   = 1000000/BYTECLK_MHZ;
localparam  ym34de3          = 6*(ir2cd37/RX_GEAR);
localparam  oubc64e   = (85000+ym34de3)/ir2cd37 < 2 ? 1 : (((85000+ym34de3)/ir2cd37) -1);
reg hofbdb7;
reg godedba;
reg pff6dd1;
reg oub6e8e;
reg hqb7470;
reg ba3aea7;
reg nrd753a;
reg lfba9d6;
reg med4eb6;
reg baa75b0;
reg zm3ad82;
reg wjd6c12;
reg thc7885;
reg yz3c42e;
reg ofe2174;
reg ym10ba4;
reg ux85d20;
reg ie2e905;
reg nr74829;
reg epa414f;
reg ba20a7d;
reg ym53ea;
reg mt29f50;
reg pf4fa84;
reg ui7d426;
reg goea130;
reg th50980;
reg hd84c06;
reg kf26037;
reg tw301bc;
reg wl80de2;
reg bn6f15;
reg lf378ae;
reg iebc576;
reg qte2bb0;
reg sw15d85;
reg [1 : 0] yzaec28;
reg [1 : 0] jc76145;
reg [1 : 0] zzb0a2b;
reg [1 : 0] wl8515f;
reg [1 : 0] xl28afc;
reg [1 : 0] zx457e6;
reg [1 : 0] sw2bf36;
reg [1 : 0] pf5f9b1;
reg [RX_GEAR - 1 : 0] dze6c7f;
reg [RX_GEAR - 1 : 0] irb1ffd;
reg [RX_GEAR - 1 : 0] en7ff6c;
reg [RX_GEAR - 1 : 0] qtfdb20;
reg [RX_GEAR - 1 : 0] rg6c82c;
reg [RX_GEAR - 1 : 0] tw20b17;
reg [RX_GEAR - 1 : 0] yz2c5d1;
reg [RX_GEAR - 1 : 0] ir17469;
reg [RX_GEAR - 1 : 0] icd1a67;
reg [RX_GEAR - 1 : 0] jc699c0;
reg [RX_GEAR - 1 : 0] qg67011;
reg [RX_GEAR - 1 : 0] jcc0446;
reg [RX_GEAR - 1 : 0] zm11195;
reg [RX_GEAR - 1 : 0] os46559;
reg [RX_GEAR - 1 : 0] qv9564e;
reg [RX_GEAR - 1 : 0] me593ac;
reg [RX_GEAR - 1 : 0] mr4eb0d;
reg [RX_GEAR - 1 : 0] mgac365;
reg [RX_GEAR - 1 : 0] ohd94e;
reg [RX_GEAR - 1 : 0] cz653aa;
reg kqf060b;
reg [3 : 0] lsb0e8;
reg of75564;
reg jraab24;
reg vv55927;
reg ukac93e;
reg [1 : 0] bl649f0;
reg [1 : 0] ym24f86;
reg [1 : 0] db27c30;
reg [1 : 0] sw3e187;
reg [1 : 0] uif0c39;
reg [1 : 0] hq861c9;
reg je30e4b;
reg wy8725b;
reg an392d9;
reg enc96cc;
reg mr4b664;
reg cz5b325;
reg end992c;
reg uvcc964;
reg pf64b25;
reg [RX_GEAR - 1 : 0] wl2c972;
reg rt64b94;
reg xy25ca6;
reg sw2e532;
reg ic72990;
reg nt94c80;
reg [3 : 0] iea6406;
reg [3 : 0] fp32030;
reg [3 : 0] sj90187;
reg [RX_GEAR - 1 : 0] xl61ed;
reg [RX_GEAR - 1 : 0] gq87b7b;
reg [RX_GEAR - 1 : 0] aledec7;
reg [RX_GEAR - 1 : 0] rt7b1e4;
reg [15 : 0] pfd8f27;
reg [15 : 0] fnc793e;
reg [15 : 0] qv3c9f6;
reg [15 : 0] fae4fb5;
reg [RX_GEAR - 1 : 0] ym3ed57;
reg [RX_GEAR - 1 : 0] rvb55c6;
reg [RX_GEAR - 1 : 0] dm571b7;
reg [RX_GEAR - 1 : 0] mrc6dd3;
reg [RX_GEAR - 1 : 0] dob74e4;
reg [RX_GEAR - 1 : 0] gbd391f;
reg [RX_GEAR - 1 : 0] hoe47ea;
reg [RX_GEAR - 1 : 0] uk1fa9d;
reg [RX_GEAR - 1 : 0] wwea74c;
reg [RX_GEAR - 1 : 0] uk9d301;
reg [RX_GEAR - 1 : 0] ww4c04e;
reg [RX_GEAR - 1 : 0] vk1385;
reg [RX_GEAR - 1 : 0] al4e157;
reg [RX_GEAR - 1 : 0] gd855ed;
reg [RX_GEAR - 1 : 0] by57b63;
reg [RX_GEAR - 1 : 0] uved8db;
reg zk6c6dc;
reg rg636e3;
reg xy1b71a;
reg osdb8d2;
reg aldc691;
reg [2047:0] kfa1c1e;
wire [122:0] twe0f4;





localparam gb707a3 = 123,vk83d1c = 32'hfdffd42b;
localparam [31:0] ng1e8e2 = vk83d1c;
localparam eca389a = vk83d1c & 4'hf;
localparam [11:0] qte268f = 'h7ff;
wire [(1 << eca389a) -1:0] qv9a3e6;
reg [gb707a3-1:0] mt8f9a0;
reg [eca389a-1:0] lde6823 [0:1];
reg [eca389a-1:0] hda08f8;
reg vk47c6;
integer oh23e32;
integer co1f195;




generate  if (DPHY_RX_IP == "MIXEL") begin    always @(posedge clk_byte_fr_i or negedge reset_n_i)    begin        if (~reset_n_i)        begin            do96f6e <= 0;        end        else if (lsb0e8 == 0)        begin            do96f6e <= godedba;        end    end
    always @(posedge clk_byte_fr_i or negedge reset_n_i)    begin        if (~reset_n_i)        begin            nr6e69c <= oubc64e;        end                else if (!godedba)        begin            nr6e69c <= oubc64e;        end        else if (lsb0e8 == 0)        begin            nr6e69c <= 0;        end        else if (godedba)        begin            nr6e69c <= lsb0e8 - 1;        end    end  end
endgenerate
generate        if (DPHY_RX_IP == "MIXEL") begin        assign clk_hs_o = pf64b25;    end    else if (DPHY_RX_IP == "LATTICE") begin        assign clk_hs_o = clk_byte_o;    end        if (DPHY_RX_IP == "MIXEL") begin                        assign czfd06c = iea6406 | fp32030;                if (NUM_RX_LANE == 1)            assign xjf67a1 = sj90187[0];        else if (NUM_RX_LANE == 2)            assign xjf67a1 = &sj90187[1:0];        else if (NUM_RX_LANE == 3)            assign xjf67a1 = &sj90187[2:0];        else if (NUM_RX_LANE == 4)            assign xjf67a1 = &sj90187[3:0];        assign lsb8a13 = je30e4b | lf378ae;        if (NUM_RX_LANE < 1)            assign rgc509b = wy8725b | iebc576;        else if (NUM_RX_LANE < 2)            assign jr284da = an392d9 | qte2bb0;        else if (NUM_RX_LANE < 3)            assign tu426d7 = enc96cc | sw15d85;    end    else if (DPHY_RX_IP == "LATTICE") begin        always @(posedge clk_byte_o or negedge reset_byte_n_i) begin            if (~reset_byte_n_i) begin                hs_d0_en_r <= 0;                ri3ab92 <= 0;            end            else begin                hs_d0_en_r <= ba3aea7;                ri3ab92 <= hs_d0_en_r;            end        end
            assign xjf67a1 = ba3aea7 | thc7885 | (|ym3ed57);

        assign lsb8a13 = lf378ae;        if (NUM_RX_LANE > 1) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d1_en_r  <= 0;                    jcd5c92 <= 0;                end                else begin                    hs_d1_en_r  <= nrd753a;                    jcd5c92 <= hs_d1_en_r;                end            end
                assign ecb3d0f = nrd753a | yz3c42e | (|rvb55c6);

            assign rgc509b = iebc576;        end        if (NUM_RX_LANE > 2) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d2_en_r  <= 0;                    epae492 <= 0;                end                else begin                    hs_d2_en_r  <= lfba9d6;                    epae492 <= hs_d2_en_r;                end            end
                assign hd9e878 = lfba9d6 | ofe2174 | (|dm571b7);

            assign jr284da = qte2bb0;        end        if (NUM_RX_LANE > 3) begin            always @(posedge clk_byte_o or negedge reset_byte_n_i) begin                if (~reset_byte_n_i) begin                    hs_d3_en_r  <= 0;                    ay72494 <= 0;                end                else begin                    hs_d3_en_r  <= med4eb6;                    ay72494 <= hs_d3_en_r;                end            end
                assign vif43c7 = med4eb6 | ym10ba4 | (|mrc6dd3);

            assign tu426d7 = sw15d85;        end    end        if (DPHY_RX_IP == "MIXEL") begin        assign ho42541 = pfd8f27[RX_GEAR-1:0];        if (NUM_RX_LANE > 1)          assign kf12a0b = fnc793e[RX_GEAR-1:0];        if (NUM_RX_LANE > 2)          assign qv9505d = qv3c9f6[RX_GEAR-1:0];        if (NUM_RX_LANE > 3)          assign lsa82ed = fae4fb5[RX_GEAR-1:0];    end    else if (DPHY_RX_IP == "LATTICE") begin        assign ho42541 = ym3ed57;        if (NUM_RX_LANE > 1)          assign kf12a0b = rvb55c6;        if (NUM_RX_LANE > 2)          assign qv9505d = dm571b7;        if (NUM_RX_LANE > 3)          assign lsa82ed = mrc6dd3;    end        if (DPHY_RX_IP == "MIXEL") begin        assign hs_sync_o = nr74829 | epa414f;    end    else if (DPHY_RX_IP == "LATTICE") begin        assign hs_sync_o = mr4b664;    end        if (DPHY_RX_IP == "MIXEL") begin        assign bd0_o = mr4eb0d;        if (NUM_RX_LANE > 1)            assign bd1_o = mgac365;        if (NUM_RX_LANE > 2)            assign bd2_o = ohd94e;        if (NUM_RX_LANE > 3)            assign bd3_o = cz653aa;    end    else if (DPHY_RX_IP == "LATTICE") begin        assign bd0_o = al4e157;        if (NUM_RX_LANE > 1)            assign bd1_o = gd855ed;        if (NUM_RX_LANE > 2)            assign bd2_o = by57b63;        if (NUM_RX_LANE > 3)            assign bd3_o = uved8db;    end        if (DPHY_RX_IP == "MIXEL")    begin                assign cd_d0_o = ic72990 | nt94c80;                if (NUM_RX_LANE == 1)    begin            assign ph9e8d = 0; assign bl4f46f = 0; assign sh7a37f = 0;        end        else if (NUM_RX_LANE == 2)    begin            assign ph9e8d = 1; assign bl4f46f = 0; assign sh7a37f = 0;        end        else if (NUM_RX_LANE == 3)    begin            assign ph9e8d = 1; assign bl4f46f = 1; assign sh7a37f = 0;        end        else if (NUM_RX_LANE == 4)    begin            assign ph9e8d = 1; assign bl4f46f = 1; assign sh7a37f = 1;        end                if (RX_GEAR == 16)            assign mta13d1 = 16'hB800;        else            assign mta13d1 = 8'hB8;        always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)        begin            if (~reset_byte_fr_n_i) begin                vvd830c <= 0;            end            else if (ie2e905 & ~nr74829) begin                vvd830c <= wl2c972;            end            else if (nr74829) begin                vvd830c <= zm11195;            end            else begin                vvd830c <= 0;            end        end        if (NUM_RX_LANE > 1)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  cmc1867 <= 0;              end              else if (ie2e905 & ~nr74829) begin                  cmc1867 <= wl2c972;              end              else if (nr74829) begin                  cmc1867 <= os46559;              end              else begin                  cmc1867 <= 0;              end          end        end        if (NUM_RX_LANE > 2)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  xlc339 <= 0;              end              else if (ie2e905 & ~nr74829) begin                  xlc339 <= wl2c972;              end              else if (nr74829) begin                  xlc339 <= qv9564e;              end              else begin                  xlc339 <= 0;              end          end        end        if (NUM_RX_LANE > 3)        begin          always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)          begin              if (~reset_byte_fr_n_i) begin                  jp619ce <= 0;              end              else if (ie2e905 & ~nr74829) begin                  jp619ce <= wl2c972;              end              else if (nr74829) begin                  jp619ce <= me593ac;              end              else begin                  jp619ce <= 0;              end          end        end    end
endgenerate

assign ep39db8  = reset_byte_n_i & (epa414f|je30e4b);
assign mecedc5 = reset_byte_n_i & (pf4fa84|wy8725b);
assign xw76e28 = reset_byte_n_i & (hd84c06|an392d9);
assign bab7142 = reset_byte_n_i & (bn6f15|enc96cc);


always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        co924a1  <= 0;        ym92508  <= 0;        sw92840  <= 0;        db94201  <= 0;    end    else begin        co924a1  <= je30e4b;        ym92508  <= ux85d20;        sw92840  <= ie2e905;        db94201  <= nr74829;    end
end


always @(posedge clk_byte_o or negedge ep39db8)
begin    if (~ep39db8) begin        gb4b148 <= 0;    end    else if (yzaec28 == 2'b10) begin        gb4b148 <= 0;    end    else if (of75564) begin        gb4b148 <= yzaec28 + 1;    end    else begin        gb4b148 <= 0;    end
end
always @(posedge clk_byte_o or negedge ep39db8)
begin    if (~ep39db8) begin        cm72a4b <= 0;    end    else if (je30e4b) begin        cm72a4b <= 1;    end
end

always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        fa58a45 <= 0;    end    else if (jc76145 == 2'b10) begin        fa58a45 <= 0;    end    else if (ie2e905 | nr74829) begin        fa58a45 <= jc76145 + 1;    end    else begin        fa58a45 <= 0;    end
end
generate    if (DPHY_RX_IP=="MIXEL") begin        if (NUM_RX_LANE > 1) begin            assign db136bb         = yzaec28;            assign jr9b5de      = jc76145;            assign ief1d4 = ie2e905 | nr74829;        end        if (NUM_RX_LANE > 2) begin            assign hodaef6         = yzaec28;            assign xjd77b3      = jc76145;            assign ui78ea1 = ie2e905 | nr74829;        end        if (NUM_RX_LANE > 3) begin            assign mtbbd9e         = yzaec28;            assign uidecf4      = jc76145;            assign nrc7509 = ie2e905 | nr74829;        end    end    else if (DPHY_RX_IP=="LATTICE") begin        if (NUM_RX_LANE > 1) begin            assign db136bb         = zzb0a2b;            assign jr9b5de      = wl8515f;            assign ief1d4 = ym53ea | mt29f50;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    mta100f  <= 0;                    oh807d  <= 0;                    pf403ec  <= 0;                    ri1f66  <= 0;                end                else begin                    mta100f  <= wy8725b;                    oh807d  <= ba20a7d;                    pf403ec  <= ym53ea;                    ri1f66  <= mt29f50;                end            end            always @(posedge clk_byte_o or negedge mecedc5)            begin                if (~mecedc5) begin                    byc522a <= 0;                end                else if (zzb0a2b == 2'b10) begin                    byc522a <= 0;                end                else if (jraab24) begin                    byc522a <= zzb0a2b + 1;                end                else begin                    byc522a <= 0;                end            end            always @(posedge clk_byte_o or negedge ep39db8)            begin                if (~ep39db8) begin                    qv95258 <= 0;                end                else if (wy8725b) begin                    qv95258 <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    kf29152 <= 0;                end                else if (wl8515f == 2'b10) begin                    kf29152 <= 0;                end                else if (cz5b325) begin                    kf29152 <= wl8515f + 1;                end                else begin                    kf29152 <= 0;                end            end        end        if (NUM_RX_LANE > 2) begin            assign hodaef6         = xl28afc;            assign xjd77b3      = zx457e6;            assign ui78ea1 = goea130 | th50980;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    ksfb33  <= 0;                    go7d998  <= 0;                    fneccc1  <= 0;                    jc6660e  <= 0;                end                else begin                    ksfb33  <= an392d9;                    go7d998  <= ui7d426;                    fneccc1  <= goea130;                    jc6660e  <= th50980;                end            end            always @(posedge clk_byte_o or negedge xw76e28)            begin                if (~xw76e28) begin                    by48a95 <= 0;                end                else if (xl28afc == 2'b10) begin                    by48a95 <= 0;                end                else if (vv55927) begin                    by48a95 <= xl28afc + 1;                end                else begin                    by48a95 <= 0;                end            end            always @(posedge clk_byte_o or negedge ep39db8)            begin                if (~ep39db8) begin                    ksa92c5 <= 0;                end                else if (an392d9) begin                    ksa92c5 <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    th454ab <= 0;                end                else if (zx457e6 == 2'b10) begin                    th454ab <= 0;                end                else if (end992c) begin                    th454ab <= zx457e6 + 1;                end                else begin                    th454ab <= 0;                end            end        end        if (NUM_RX_LANE > 3) begin            assign mtbbd9e         = sw2bf36;            assign uidecf4      = pf5f9b1;            assign nrc7509 = tw301bc | wl80de2;            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    mt33072  <= 0;                    uk98395  <= 0;                    uic1ca9  <= 0;                    jee549  <= 0;                end                else begin                    mt33072  <= enc96cc;                    uk98395  <= kf26037;                    uic1ca9  <= tw301bc;                    jee549  <= wl80de2;                end            end            always @(posedge clk_byte_o or negedge bab7142)            begin                if (~bab7142) begin                    xy2a55e <= 0;                end                else if (sw2bf36 == 2'b10) begin                    xy2a55e <= 0;                end                else if (ukac93e) begin                    xy2a55e <= sw2bf36 + 1;                end                else begin                    xy2a55e <= 0;                end            end            always @(posedge clk_byte_o or negedge ep39db8)            begin                if (~ep39db8) begin                    ay49629 <= 0;                end                else if (enc96cc) begin                    ay49629 <= 1;                end            end            always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)            begin                if (~reset_byte_fr_n_i) begin                    xw52af2 <= 0;                end                else if (pf5f9b1 == 2'b10) begin                    xw52af2 <= 0;                end                else if (uvcc964) begin                    xw52af2 <= pf5f9b1 + 1;                end                else begin                    xw52af2 <= 0;                end            end        end    end
endgenerate


always @(posedge clk_byte_o or negedge reset_byte_n_i)
begin    if (~reset_byte_n_i) begin        mtabc9d <= 0;        aled958 <= 0;        suc4542 <= 0;    end    else begin        case (yzaec28)            2'b00:   mtabc9d <= dob74e4;            2'b01:   aled958 <= dob74e4;            2'b10:   suc4542 <= dob74e4;            default: mtabc9d <= dob74e4;        endcase    end
end
always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)
begin    if (~reset_byte_fr_n_i) begin        wy10e5b <= 0;    end    else if (ie2e905 | nr74829) begin        case (jc76145)            2'b00:   wy10e5b <= dze6c7f;            2'b01:   wy10e5b <= rg6c82c;            2'b10:   wy10e5b <= icd1a67;            default: wy10e5b <= dze6c7f;        endcase    end
end

generate  if (NUM_RX_LANE > 1)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            sh5e4ed <= 0;            vi6cac4 <= 0;            rv22a10 <= 0;        end        else begin            case (bl649f0)                2'b00:   sh5e4ed <= gbd391f;                2'b01:   vi6cac4 <= gbd391f;                2'b10:   rv22a10 <= gbd391f;                default: sh5e4ed <= gbd391f;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            co872d8 <= 0;        end        else if (cz5b325) begin            case (ym24f86)                2'b00:   co872d8 <= irb1ffd;                2'b01:   co872d8 <= tw20b17;                2'b10:   co872d8 <= jc699c0;                default: co872d8 <= irb1ffd;            endcase        end    end  end
  if (NUM_RX_LANE > 2)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            czf276c <= 0;            ip65622 <= 0;            aa15087 <= 0;        end        else begin            case (db27c30)                2'b00:   czf276c <= hoe47ea;                2'b01:   ip65622 <= hoe47ea;                2'b10:   aa15087 <= hoe47ea;                default: czf276c <= hoe47ea;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            wl396c1 <= 0;        end        else if (end992c) begin            case (sw3e187)                2'b00:   wl396c1 <= en7ff6c;                2'b01:   wl396c1 <= yz2c5d1;                2'b10:   wl396c1 <= qg67011;                default: wl396c1 <= en7ff6c;            endcase        end    end  end
  if (NUM_RX_LANE > 3)  begin    always @(posedge clk_byte_o or negedge reset_byte_n_i)    begin        if (~reset_byte_n_i) begin            tw93b65 <= 0;            gq2b115 <= 0;            nga8439 <= 0;        end        else begin            case (uif0c39)                2'b00:   tw93b65 <= uk1fa9d;                2'b01:   gq2b115 <= uk1fa9d;                2'b10:   nga8439 <= uk1fa9d;                default: tw93b65 <= uk1fa9d;            endcase        end    end    always @(posedge clk_byte_fr_i or negedge reset_byte_fr_n_i)    begin        if (~reset_byte_fr_n_i) begin            wwcb60c <= 0;        end        else if (uvcc964) begin            case (hq861c9)                2'b00:   wwcb60c <= qtfdb20;                2'b01:   wwcb60c <= ir17469;                2'b10:   wwcb60c <= jcc0446;                default: wwcb60c <= qtfdb20;            endcase        end    end  end
endgenerate
generate    if (DPHY_RX_IP == "MIXEL")    begin : aab9f44        MIPIDPHYA #(            .HSEL          (RX_GEAR/8-1),              .HS_16BIT_EN   (RX_GEAR/8-1),              .CN            (5'd0),            .CM            (8'd0),            .CO            (2'd0),            .PLL_TST       (4'd9),            .ENP_DESER     (1'd0)        )        qte8850 (
            .CKP           (clk_p_i),            .CKN           (clk_n_i),            .CLKHSBYTE     (fc3a84f),                    .CLKRXHSEN     (term_clk_en_i),            .CLKRXLPEN     (~term_clk_en_i),            .CLKDRXLPP     (lp_clk_rx_p_o),            .CLKDRXLPN     (lp_clk_rx_n_o),            .CLKCDEN       (1'b1),            .CLKDCDN       (cd_clk_o),            .CLKTXLPEN     (1'b0),            .CLKDTXLPP     (1'b0),            .CLKDTXLPN     (1'b0),            .CLKTXHSEN     (1'b0),            .CLKTXHSGATE   (1'b0),            .CLKTXHSPD     (1'b1),            .CLKDRXHS      (),            .HSBYTECLKD    (clk_byte_o),                .HSBYTECLKS    (),
            .LBEN          (1'b0),                    .PDDPHY        (~reset_n_i),              .PDBIAS        (1'b0),              .PDCKG         (1'b0),  
            .CLKREF        (1'b0),            .LOCK          (),            .PDPLL         (1'b1),
            .DP0           (d0_p_io),            .DN0           (d0_n_io),            .D0RXLPEN      (~lp_d0_tx_en_i),            .D0DRXLPP      (lp_d0_rx_p_o),            .D0DRXLPN      (lp_d0_rx_n_o),            .D0CDEN        (1'b1),                    .D0DCDP        (uid1bfd),                 .D0DCDN        (mg8dfe8),                 .D0TXLPEN      (lp_d0_tx_en_i),            .D0DTXLPP      (lp_d0_tx_p_i),            .D0DTXLPN      (lp_d0_tx_n_i),            .D0RXHSEN      (term_d0_en_i),            .D0HSRXDATA15  (fc25b56[15]),            .D0HSRXDATA14  (fc25b56[14]),            .D0HSRXDATA13  (fc25b56[13]),            .D0HSRXDATA12  (fc25b56[12]),            .D0HSRXDATA11  (fc25b56[11]),            .D0HSRXDATA10  (fc25b56[10]),            .D0HSRXDATA9   (fc25b56[9]),            .D0HSRXDATA8   (fc25b56[8]),            .D0HSRXDATA7   (fc25b56[7]),            .D0HSRXDATA6   (fc25b56[6]),            .D0HSRXDATA5   (fc25b56[5]),            .D0HSRXDATA4   (fc25b56[4]),            .D0HSRXDATA3   (fc25b56[3]),            .D0HSRXDATA2   (fc25b56[2]),            .D0HSRXDATA1   (fc25b56[1]),            .D0HSRXDATA0   (fc25b56[0]),            .D0SYNC        (cz6ff41[0]),              .D0ERRSYNC     (qt7fa0d[0]),             .D0NOSYNC      (),                          .D0HSDESEREN   (do96f6e & term_d0_en_i),            .D0TXHSEN      (1'b0),            .D0HSTXDATA15  (1'b0),            .D0HSTXDATA14  (1'b0),            .D0HSTXDATA13  (1'b0),            .D0HSTXDATA12  (1'b0),            .D0HSTXDATA11  (1'b0),            .D0HSTXDATA10  (1'b0),            .D0HSTXDATA9   (1'b0),            .D0HSTXDATA8   (1'b0),            .D0HSTXDATA7   (1'b0),            .D0HSTXDATA6   (1'b0),            .D0HSTXDATA5   (1'b0),            .D0HSTXDATA4   (1'b0),            .D0HSTXDATA3   (1'b0),            .D0HSTXDATA2   (1'b0),            .D0HSTXDATA1   (1'b0),            .D0HSTXDATA0   (1'b0),            .D0HSSEREN     (1'b0),            .D0TXHSPD      (1'b1),              .D0DRXHS       (),
            .DP1           (d1_p_i),            .DN1           (d1_n_i),            .D1RXLPEN      (1'b0),            .D1DRXLPP      (lp_d1_rx_p_o),            .D1DRXLPN      (lp_d1_rx_n_o),            .D1CDEN        (1'b0),                .D1DCDP        (),                    .D1DCDN        (),                    .D1TXLPEN      (1'b0),            .D1DTXLPP      (1'b0),            .D1DTXLPN      (1'b0),            .D1RXHSEN      (term_d1_en_i & ph9e8d),            .D1HSRXDATA15  (hd2dab2[15]),            .D1HSRXDATA14  (hd2dab2[14]),            .D1HSRXDATA13  (hd2dab2[13]),            .D1HSRXDATA12  (hd2dab2[12]),            .D1HSRXDATA11  (hd2dab2[11]),            .D1HSRXDATA10  (hd2dab2[10]),            .D1HSRXDATA9   (hd2dab2[9]),            .D1HSRXDATA8   (hd2dab2[8]),            .D1HSRXDATA7   (hd2dab2[7]),            .D1HSRXDATA6   (hd2dab2[6]),            .D1HSRXDATA5   (hd2dab2[5]),            .D1HSRXDATA4   (hd2dab2[4]),            .D1HSRXDATA3   (hd2dab2[3]),            .D1HSRXDATA2   (hd2dab2[2]),            .D1HSRXDATA1   (hd2dab2[1]),            .D1HSRXDATA0   (hd2dab2[0]),            .D1SYNC        (cz6ff41[1]),              .D1ERRSYNC     (qt7fa0d[1]),             .D1NOSYNC      (),                          .D1HSDESEREN   (do96f6e & term_d1_en_i & ph9e8d),            .D1TXHSEN      (1'b0),            .D1HSTXDATA15  (1'b0),            .D1HSTXDATA14  (1'b0),            .D1HSTXDATA13  (1'b0),            .D1HSTXDATA12  (1'b0),            .D1HSTXDATA11  (1'b0),            .D1HSTXDATA10  (1'b0),            .D1HSTXDATA9   (1'b0),            .D1HSTXDATA8   (1'b0),            .D1HSTXDATA7   (1'b0),            .D1HSTXDATA6   (1'b0),            .D1HSTXDATA5   (1'b0),            .D1HSTXDATA4   (1'b0),            .D1HSTXDATA3   (1'b0),            .D1HSTXDATA2   (1'b0),            .D1HSTXDATA1   (1'b0),            .D1HSTXDATA0   (1'b0),            .D1HSSEREN     (1'b0),            .D1TXHSPD      (1'b1),	            .D1DRXHS       (),
            .DP2           (d2_p_i),            .DN2           (d2_n_i),            .D2RXLPEN      (1'b0),            .D2DRXLPP      (lp_d2_rx_p_o),            .D2DRXLPN      (lp_d2_rx_n_o),            .D2CDEN        (1'b0),                .D2DCDP        (),                    .D2DCDN        (),                    .D2TXLPEN      (1'b0),            .D2DTXLPP      (1'b0),            .D2DTXLPN      (1'b0),            .D2RXHSEN      (term_d2_en_i & bl4f46f),            .D2HSRXDATA15  (yk6d596[15]),            .D2HSRXDATA14  (yk6d596[14]),            .D2HSRXDATA13  (yk6d596[13]),            .D2HSRXDATA12  (yk6d596[12]),            .D2HSRXDATA11  (yk6d596[11]),            .D2HSRXDATA10  (yk6d596[10]),            .D2HSRXDATA9   (yk6d596[9]),            .D2HSRXDATA8   (yk6d596[8]),            .D2HSRXDATA7   (yk6d596[7]),            .D2HSRXDATA6   (yk6d596[6]),            .D2HSRXDATA5   (yk6d596[5]),            .D2HSRXDATA4   (yk6d596[4]),            .D2HSRXDATA3   (yk6d596[3]),            .D2HSRXDATA2   (yk6d596[2]),            .D2HSRXDATA1   (yk6d596[1]),            .D2HSRXDATA0   (yk6d596[0]),            .D2SYNC        (cz6ff41[2]),              .D2ERRSYNC     (qt7fa0d[2]),             .D2NOSYNC      (),                          .D2HSDESEREN   (do96f6e & term_d2_en_i & bl4f46f),            .D2TXHSEN      (1'b0),            .D2HSTXDATA15  (1'b0),            .D2HSTXDATA14  (1'b0),            .D2HSTXDATA13  (1'b0),            .D2HSTXDATA12  (1'b0),            .D2HSTXDATA11  (1'b0),            .D2HSTXDATA10  (1'b0),            .D2HSTXDATA9   (1'b0),            .D2HSTXDATA8   (1'b0),            .D2HSTXDATA7   (1'b0),            .D2HSTXDATA6   (1'b0),            .D2HSTXDATA5   (1'b0),            .D2HSTXDATA4   (1'b0),            .D2HSTXDATA3   (1'b0),            .D2HSTXDATA2   (1'b0),            .D2HSTXDATA1   (1'b0),            .D2HSTXDATA0   (1'b0),            .D2HSSEREN     (1'b0),            .D2TXHSPD      (1'b1),	            .D2DRXHS       (),
            .DP3           (d3_p_i),            .DN3           (d3_n_i),            .D3RXLPEN      (1'b0),            .D3DRXLPP      (lp_d3_rx_p_o),            .D3DRXLPN      (lp_d3_rx_n_o),            .D3CDEN        (1'b0),                .D3DCDP        (),                    .D3DCDN        (),                    .D3TXLPEN      (1'b0),            .D3DTXLPP      (1'b0),            .D3DTXLPN      (1'b0),            .D3RXHSEN      (term_d3_en_i & sh7a37f),            .D3HSRXDATA15  (kd6acb1[15]),            .D3HSRXDATA14  (kd6acb1[14]),            .D3HSRXDATA13  (kd6acb1[13]),            .D3HSRXDATA12  (kd6acb1[12]),            .D3HSRXDATA11  (kd6acb1[11]),            .D3HSRXDATA10  (kd6acb1[10]),            .D3HSRXDATA9   (kd6acb1[9]),            .D3HSRXDATA8   (kd6acb1[8]),            .D3HSRXDATA7   (kd6acb1[7]),            .D3HSRXDATA6   (kd6acb1[6]),            .D3HSRXDATA5   (kd6acb1[5]),            .D3HSRXDATA4   (kd6acb1[4]),            .D3HSRXDATA3   (kd6acb1[3]),            .D3HSRXDATA2   (kd6acb1[2]),            .D3HSRXDATA1   (kd6acb1[1]),            .D3HSRXDATA0   (kd6acb1[0]),            .D3SYNC        (cz6ff41[3]),              .D3ERRSYNC     (qt7fa0d[3]),             .D3NOSYNC      (),                          .D3HSDESEREN   (do96f6e & term_d3_en_i & sh7a37f),            .D3TXHSEN      (1'b0),            .D3HSTXDATA15  (1'b0),            .D3HSTXDATA14  (1'b0),            .D3HSTXDATA13  (1'b0),            .D3HSTXDATA12  (1'b0),            .D3HSTXDATA11  (1'b0),            .D3HSTXDATA10  (1'b0),            .D3HSTXDATA9   (1'b0),            .D3HSTXDATA8   (1'b0),            .D3HSTXDATA7   (1'b0),            .D3HSTXDATA6   (1'b0),            .D3HSTXDATA5   (1'b0),            .D3HSTXDATA4   (1'b0),            .D3HSTXDATA3   (1'b0),            .D3HSTXDATA2   (1'b0),            .D3HSTXDATA1   (1'b0),            .D3HSTXDATA0   (1'b0),            .D3HSSEREN     (1'b0),            .D3TXHSPD      (1'b1),	            .D3DRXHS       ()        );    end    else if (DPHY_RX_IP == "LATTICE")    begin : lf989b        kdc9dfd #(            .RX_GEAR     (RX_GEAR),            .NUM_RX_LANE (NUM_RX_LANE)        )        shf81ba (            .reset_n_i      (reset_n_i),            .clk_p_i        (clk_p_i),            .clk_n_i        (clk_n_i),            .d0_p_io        (d0_p_io),            .d0_n_io        (d0_n_io),            .d1_p_i         (d1_p_i),            .d1_n_i         (d1_n_i),            .d2_p_i         (d2_p_i),            .d2_n_i         (d2_n_i),            .d3_p_i         (d3_p_i),            .d3_n_i         (d3_n_i),            .oh332f6    (hofbdb7),            .hs_d0_en_i     (godedba),            .hs_d1_en_i     (pff6dd1),            .hs_d2_en_i     (oub6e8e),            .hs_d3_en_i     (hqb7470),            .lp_d0_tx_en_i  (baa75b0),            .lp_d0_tx_p_i   (zm3ad82),            .lp_d0_tx_n_i   (wjd6c12),            .clk_byte_o     (clk_byte_o),            .bd0_o          (jeb2c68[RX_GEAR-1:0]),            .bd1_o          (tw96342[RX_GEAR-1:0]),            .bd2_o          (gdb1a12[RX_GEAR-1:0]),            .bd3_o          (ym8d095[RX_GEAR-1:0]),            .lp_clk_rx_p_o  (lp_clk_rx_p_o),            .lp_clk_rx_n_o  (lp_clk_rx_n_o),            .lp_d0_rx_p_o   (lp_d0_rx_p_o),            .lp_d0_rx_n_o   (lp_d0_rx_n_o),            .lp_d1_rx_p_o   (lp_d1_rx_p_o),            .lp_d1_rx_n_o   (lp_d1_rx_n_o),            .lp_d2_rx_p_o   (lp_d2_rx_p_o),            .lp_d2_rx_n_o   (lp_d2_rx_n_o),            .lp_d3_rx_p_o   (lp_d3_rx_p_o),            .lp_d3_rx_n_o   (lp_d3_rx_n_o),            .cd_clk_o       (cd_clk_o),            .cd_d0_o        (cd_d0_o)        );        ymb9d0e #(            .RX_GEAR     (RX_GEAR),            .NUM_RX_LANE (NUM_RX_LANE),            .BYTECLK_MHZ (BYTECLK_MHZ)        )        ps571fb (            .reset_n_i        (reset_byte_fr_n_i),            .dz711a3       (clk_byte_fr_i),            .dmf100a            (zm11195),            .bl40290            (os46559),            .uka432            (qv9564e),            .kf90c8a            (me593ac),            .wy88d1e         (nr74829),            .cm468f1         (mt29f50),            .qi34788         (th50980),            .wya3c40         (wl80de2),            .bd0_o            (dobb5c),            .bd1_o            (dm5dae2),            .bd2_o            (mred712),            .bd3_o            (th6b895),            .hbfca48    (),            .kqe5247  (alccb33),            .yz29239  (kd6599d),            .ic491cd  (ux2ccec),            .rg48e68  (zk66764),            .hs_sync_o        (zk79966)        );
        if (LANE_ALIGN == "ON") begin          fp27b5a #(              .RX_GEAR     (RX_GEAR),              .NUM_RX_LANE (NUM_RX_LANE),              .FIFO_DEPTH  (FIFO_DEPTH),              .FIFO_TYPE0  (FIFO_TYPE0),              .FIFO_TYPE1  (FIFO_TYPE1),              .FIFO_TYPE2  (FIFO_TYPE2),              .FIFO_TYPE3  (FIFO_TYPE3)          )          dze627e (              .os77fab            (clk_byte_fr_i),              .pseeff5          (~reset_byte_fr_n_i),              .dmf100a            (wwea74c),              .bl40290            (uk9d301),              .uka432            (ww4c04e),              .kf90c8a            (vk1385),              .tj8457c          (rg636e3),              .zz22be6          (xy1b71a),              .mg15f37          (osdb8d2),              .dbaf9b8          (aldc691),              .xw7cdc7           (zk6c6dc),              .bd0_o            (wje2579),              .bd1_o            (mt12bcc),              .bd2_o            (gd95e65),              .bd3_o            (hdaf32c),              .hs_sync_o        (mta1e3a)          );       end       else begin           assign wje2579     = wwea74c;           assign mt12bcc     = uk9d301;           assign gd95e65     = ww4c04e;           assign hdaf32c     = vk1385;           assign mta1e3a = zk6c6dc;       end    end
endgenerate
always@* begin hofbdb7<=twe0f4[0];godedba<=twe0f4[1];pff6dd1<=twe0f4[2];oub6e8e<=twe0f4[3];hqb7470<=twe0f4[4];ba3aea7<=twe0f4[5];nrd753a<=twe0f4[6];lfba9d6<=twe0f4[7];med4eb6<=twe0f4[8];baa75b0<=twe0f4[9];zm3ad82<=twe0f4[10];wjd6c12<=twe0f4[11];thc7885<=twe0f4[12];yz3c42e<=twe0f4[13];ofe2174<=twe0f4[14];ym10ba4<=twe0f4[15];ux85d20<=twe0f4[16];ie2e905<=twe0f4[17];nr74829<=twe0f4[18];epa414f<=twe0f4[19];ba20a7d<=twe0f4[20];ym53ea<=twe0f4[21];mt29f50<=twe0f4[22];pf4fa84<=twe0f4[23];ui7d426<=twe0f4[24];goea130<=twe0f4[25];th50980<=twe0f4[26];hd84c06<=twe0f4[27];kf26037<=twe0f4[28];tw301bc<=twe0f4[29];wl80de2<=twe0f4[30];bn6f15<=twe0f4[31];lf378ae<=twe0f4[32];iebc576<=twe0f4[33];qte2bb0<=twe0f4[34];sw15d85<=twe0f4[35];yzaec28<={gb4b148>>1,twe0f4[36]};jc76145<={fa58a45>>1,twe0f4[37]};zzb0a2b<={byc522a>>1,twe0f4[38]};wl8515f<={kf29152>>1,twe0f4[39]};xl28afc<={by48a95>>1,twe0f4[40]};zx457e6<={th454ab>>1,twe0f4[41]};sw2bf36<={xy2a55e>>1,twe0f4[42]};pf5f9b1<={xw52af2>>1,twe0f4[43]};dze6c7f<={mtabc9d>>1,twe0f4[44]};irb1ffd<={sh5e4ed>>1,twe0f4[45]};en7ff6c<={czf276c>>1,twe0f4[46]};qtfdb20<={tw93b65>>1,twe0f4[47]};rg6c82c<={aled958>>1,twe0f4[48]};tw20b17<={vi6cac4>>1,twe0f4[49]};yz2c5d1<={ip65622>>1,twe0f4[50]};ir17469<={gq2b115>>1,twe0f4[51]};icd1a67<={suc4542>>1,twe0f4[52]};jc699c0<={rv22a10>>1,twe0f4[53]};qg67011<={aa15087>>1,twe0f4[54]};jcc0446<={nga8439>>1,twe0f4[55]};zm11195<={wy10e5b>>1,twe0f4[56]};os46559<={co872d8>>1,twe0f4[57]};qv9564e<={wl396c1>>1,twe0f4[58]};me593ac<={wwcb60c>>1,twe0f4[59]};mr4eb0d<={vvd830c>>1,twe0f4[60]};mgac365<={cmc1867>>1,twe0f4[61]};ohd94e<={xlc339>>1,twe0f4[62]};cz653aa<={jp619ce>>1,twe0f4[63]};kqf060b<=twe0f4[64];lsb0e8<={nr6e69c>>1,twe0f4[65]};of75564<=twe0f4[66];jraab24<=twe0f4[67];vv55927<=twe0f4[68];ukac93e<=twe0f4[69];bl649f0<={db136bb>>1,twe0f4[70]};ym24f86<={jr9b5de>>1,twe0f4[71]};db27c30<={hodaef6>>1,twe0f4[72]};sw3e187<={xjd77b3>>1,twe0f4[73]};uif0c39<={mtbbd9e>>1,twe0f4[74]};hq861c9<={uidecf4>>1,twe0f4[75]};je30e4b<=twe0f4[76];wy8725b<=twe0f4[77];an392d9<=twe0f4[78];enc96cc<=twe0f4[79];mr4b664<=twe0f4[80];cz5b325<=twe0f4[81];end992c<=twe0f4[82];uvcc964<=twe0f4[83];pf64b25<=twe0f4[84];wl2c972<={mta13d1>>1,twe0f4[85]};rt64b94<=twe0f4[86];xy25ca6<=twe0f4[87];sw2e532<=twe0f4[88];ic72990<=twe0f4[89];nt94c80<=twe0f4[90];iea6406<={cz6ff41>>1,twe0f4[91]};fp32030<={qt7fa0d>>1,twe0f4[92]};sj90187<={czfd06c>>1,twe0f4[93]};xl61ed<={en41b25>>1,twe0f4[94]};gq87b7b<={mtd92d>>1,twe0f4[95]};aledec7<={by6c96d>>1,twe0f4[96]};rt7b1e4<={fn64b6a>>1,twe0f4[97]};pfd8f27<={fc25b56>>1,twe0f4[98]};fnc793e<={hd2dab2>>1,twe0f4[99]};qv3c9f6<={yk6d596>>1,twe0f4[100]};fae4fb5<={kd6acb1>>1,twe0f4[101]};ym3ed57<={jeb2c68>>1,twe0f4[102]};rvb55c6<={tw96342>>1,twe0f4[103]};dm571b7<={gdb1a12>>1,twe0f4[104]};mrc6dd3<={ym8d095>>1,twe0f4[105]};dob74e4<={ho42541>>1,twe0f4[106]};gbd391f<={kf12a0b>>1,twe0f4[107]};hoe47ea<={qv9505d>>1,twe0f4[108]};uk1fa9d<={lsa82ed>>1,twe0f4[109]};wwea74c<={dobb5c>>1,twe0f4[110]};uk9d301<={dm5dae2>>1,twe0f4[111]};ww4c04e<={mred712>>1,twe0f4[112]};vk1385<={th6b895>>1,twe0f4[113]};al4e157<={wje2579>>1,twe0f4[114]};gd855ed<={mt12bcc>>1,twe0f4[115]};by57b63<={gd95e65>>1,twe0f4[116]};uved8db<={hdaf32c>>1,twe0f4[117]};zk6c6dc<=twe0f4[118];rg636e3<=twe0f4[119];xy1b71a<=twe0f4[120];osdb8d2<=twe0f4[121];aldc691<=twe0f4[122];end
always@* begin kfa1c1e[2047]<=term_d0_en_i;kfa1c1e[2046]<=term_d1_en_i;kfa1c1e[2045]<=db136bb[0];kfa1c1e[2044]<=term_d2_en_i;kfa1c1e[2043]<=jr9b5de[0];kfa1c1e[2041]<=term_d3_en_i;kfa1c1e[2038]<=hodaef6[0];kfa1c1e[2035]<=hs_d0_en_i;kfa1c1e[2029]<=co872d8[0];kfa1c1e[2028]<=xjd77b3[0];kfa1c1e[2022]<=hs_d1_en_i;kfa1c1e[2011]<=wl396c1[0];kfa1c1e[2009]<=mtbbd9e[0];kfa1c1e[1996]<=hs_d2_en_i;kfa1c1e[1986]<=gdb1a12[0];kfa1c1e[1974]<=wwcb60c[0];kfa1c1e[1971]<=uidecf4[0];kfa1c1e[1945]<=hs_d3_en_i;kfa1c1e[1943]<=vi6cac4[0];kfa1c1e[1924]<=ym8d095[0];kfa1c1e[1922]<=go7d998;kfa1c1e[1901]<=vvd830c[0];kfa1c1e[1895]<=xjf67a1;kfa1c1e[1857]<=fc3a84f;kfa1c1e[1852]<=ux2ccec;kfa1c1e[1842]<=lp_d0_tx_en_i;kfa1c1e[1839]<=ip65622[0];kfa1c1e[1800]<=ho42541[0];kfa1c1e[1797]<=fneccc1;kfa1c1e[1791]<=rgc509b;kfa1c1e[1784]<=kd6acb1[0];kfa1c1e[1778]<=czf276c[0];kfa1c1e[1776]<=pf403ec;kfa1c1e[1767]<=zk79966;kfa1c1e[1759]<=do96f6e;kfa1c1e[1755]<=cmc1867[0];kfa1c1e[1742]<=ecb3d0f;kfa1c1e[1677]<=en41b25[0];kfa1c1e[1667]<=mta13d1[0];kfa1c1e[1656]<=zk66764;kfa1c1e[1652]<=mta1e3a;kfa1c1e[1637]<=lp_d0_tx_p_i;kfa1c1e[1631]<=gq2b115[0];kfa1c1e[1622]<=epae492;kfa1c1e[1552]<=kf12a0b[0];kfa1c1e[1546]<=jc6660e;kfa1c1e[1535]<=jr284da;kfa1c1e[1531]<=nga8439[0];kfa1c1e[1520]<=jeb2c68[0];kfa1c1e[1509]<=tw93b65[0];kfa1c1e[1504]<=ri1f66;kfa1c1e[1487]<=alccb33;kfa1c1e[1471]<=nr6e69c[0];kfa1c1e[1468]<=mta100f;kfa1c1e[1463]<=xlc339[0];kfa1c1e[1437]<=hd9e878;kfa1c1e[1391]<=sw92840;kfa1c1e[1312]<=ksa92c5;kfa1c1e[1307]<=mtd92d[0];kfa1c1e[1286]<=ph9e8d;kfa1c1e[1256]<=ief1d4;kfa1c1e[1226]<=lp_d0_tx_n_i;kfa1c1e[1215]<=suc4542[0];kfa1c1e[1197]<=ay72494;kfa1c1e[1153]<=gb4b148[0];kfa1c1e[1135]<=fn64b6a[0];kfa1c1e[1079]<=th6b895[0];kfa1c1e[1057]<=qv9505d[0];kfa1c1e[1050]<=sh7a37f;kfa1c1e[1044]<=mt33072;kfa1c1e[1037]<=kf29152[0];kfa1c1e[1023]<=term_clk_en_i;kfa1c1e[1022]<=tu426d7;kfa1c1e[1014]<=wy10e5b[0];kfa1c1e[993]<=tw96342[0];kfa1c1e[971]<=aled958[0];kfa1c1e[961]<=ksfb33;kfa1c1e[928]<=nrc7509;kfa1c1e[926]<=kd6599d;kfa1c1e[895]<=lsb8a13;kfa1c1e[892]<=yk6d596[0];kfa1c1e[889]<=sh5e4ed[0];kfa1c1e[888]<=oh807d;kfa1c1e[883]<=hdaf32c[0];kfa1c1e[879]<=jp619ce[0];kfa1c1e[838]<=czfd06c[0];kfa1c1e[826]<=vif43c7;kfa1c1e[811]<=jcd5c92;kfa1c1e[765]<=aa15087[0];kfa1c1e[734]<=db94201;kfa1c1e[695]<=ym92508;kfa1c1e[656]<=qv95258;kfa1c1e[576]<=ay49629;kfa1c1e[567]<=by6c96d[0];kfa1c1e[539]<=mred712[0];kfa1c1e[525]<=bl4f46f;kfa1c1e[518]<=byc522a[0];kfa1c1e[464]<=ui78ea1;kfa1c1e[446]<=hd2dab2[0];kfa1c1e[444]<=mtabc9d[0];kfa1c1e[441]<=gd95e65[0];kfa1c1e[419]<=qt7fa0d[0];kfa1c1e[405]<=ri3ab92;kfa1c1e[382]<=rv22a10[0];kfa1c1e[347]<=co924a1;kfa1c1e[328]<=cm72a4b;kfa1c1e[269]<=dm5dae2[0];kfa1c1e[259]<=fa58a45[0];kfa1c1e[223]<=fc25b56[0];kfa1c1e[222]<=xw52af2[0];kfa1c1e[220]<=mt12bcc[0];kfa1c1e[209]<=cz6ff41[0];kfa1c1e[164]<=jee549;kfa1c1e[134]<=dobb5c[0];kfa1c1e[111]<=xy2a55e[0];kfa1c1e[110]<=wje2579[0];kfa1c1e[104]<=mg8dfe8;kfa1c1e[82]<=uic1ca9;kfa1c1e[67]<=lsa82ed[0];kfa1c1e[55]<=th454ab[0];kfa1c1e[52]<=uid1bfd;kfa1c1e[41]<=uk98395;kfa1c1e[27]<=by48a95[0];end         assign qv9a3e6 = kfa1c1e,twe0f4 = mt8f9a0; initial begin oh23e32 = $fopen(".fred"); $fdisplay( oh23e32, "%3h\n%3h", (ng1e8e2 >> 4) & qte268f, (ng1e8e2 >> (eca389a+4)) & qte268f ); $fclose(oh23e32); $readmemh(".fred", lde6823); end always @ (qv9a3e6) begin hda08f8 = lde6823[1]; for (co1f195=0; co1f195<gb707a3; co1f195=co1f195+1) begin mt8f9a0[co1f195] = qv9a3e6[hda08f8]; vk47c6 = ^(hda08f8 & lde6823[0]); hda08f8 = {hda08f8, vk47c6}; end end 
endmodule

