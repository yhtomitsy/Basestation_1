//==================================================================================
// Verilog module generated by Clarity Designer    03/23/2019    09:13:23       
// Filename: csi2_4to1_1.v                                                         
// Filename: 4:1 CSI-2 to CSI-2 1.1                                    
// Copyright(c) 2016 Lattice Semiconductor Corporation. All rights reserved.        
//==================================================================================

module csi2_4to1_1
#(
//-----------------------------------------------------------------------------
// PARAMETERS
//-----------------------------------------------------------------------------

  parameter       DPHY_RX_IP_CH1   = "MIXEL",


// valid values of TX PLL parameters :
// N = 1-32
// M = 16-255
// O = 1,2,4,8

  parameter [4:0] PLL_CN           = 5'd0,      

  parameter [7:0] PLL_CM           = 8'd192,   

  parameter [1:0] PLL_CO           = 2'd0,          


// Virtual Channel ID assignment
// valid values are 2'd0-2'd3; cannot be the same value if cfg'd as VC merge 

  parameter [1:0] VC_CH0           = 00,

  parameter [1:0] VC_CH1           = 01,

// TINIT_VALUE - slave initialization time. number of byteclk cycles before 
// issuing any transaction to the slave to give it time to initialize.
// cmos2dphy parameter  

  parameter TINIT_VALUE=500,


// target tx byteclock frequency, in MHz

  parameter TX_FREQ_TGT=120

)

//-----------------------------------------------------------------------------
// PORT DECLARATIONS
//-----------------------------------------------------------------------------
(
 input 	reset_n_i,

 input  mux_sel_i,

 inout 	clk_ch0_p_i,
 inout 	clk_ch0_n_i,
 inout 	clk_ch1_p_i,
 inout 	clk_ch1_n_i,

 inout 	clk_ch2_p_i,
 inout 	clk_ch2_n_i,
 inout 	clk_ch3_p_i,
 inout 	clk_ch3_n_i,

// d0 always defined regardless of NO of LANES
 inout 	d0_ch0_n_i,
 inout 	d0_ch0_p_i,
 inout 	d0_ch1_n_i,
 inout 	d0_ch1_p_i,

 inout 	d0_ch2_n_i,
 inout 	d0_ch2_p_i,
 inout 	d0_ch3_n_i,
 inout 	d0_ch3_p_i,


// these signals within MISC_ON are used only for simulations and debug


 output clk_p_o,
 output clk_n_o,

 output d0_n_o,
 output d0_p_o

);	


//-----------------------------------------------------------------------------
// LOCAL PARAMETERS
//-----------------------------------------------------------------------------	
parameter test_mode=1'b0;


// WAIT_LESS - dphy2cmos checks for frame start before enabling output 
parameter           TX_WAIT_TIME    = "LESS_15MS";

parameter           RX_GEAR         = 8;              // DPHY Rx Clock Gear

parameter           TX_GEAR         = 8;            // DPHY Tx Clock Gear

parameter           DT              = "RAW10";

// number of dphy data lanes
parameter           LANE_COUNT = 1;

//1024 deep for lane4 cfg
parameter           LBUF_DEPTH      = 4096/1;


//RX_CLK_MODE parameter
parameter        RX_CLK_MODE = "HS_ONLY";

//TX_CLK_MODE parameter
parameter        TX_CLK_MODE = "HS_ONLY";

//TINIT_COUNT parameter
parameter        TINIT_COUNT = "ON";

//Lane aligner enable
parameter        LANE_ALIGN = "ON";

//-----------------------------------------------------------------------------
// WIRE and REGISTER DECLARATIONS
//-----------------------------------------------------------------------------
wire tx_refclk;
wire pix_clk;
wire pll_clkop;

wire clk_byte_fr;
wire clk_lp_ctrl;
wire pll_lock;
wire reset_lp_n;
wire reset_byte_fr_n;
wire tinit_done_w;

// Registers for synchronizing reset to different clock domains
reg         reset_lp_n_meta;
reg         reset_lp_n_sync;
reg         reset_byte_fr_n_meta;
reg         reset_byte_fr_n_sync;

assign reset_lp_n         = reset_lp_n_sync;
assign reset_byte_fr_n    = reset_byte_fr_n_sync;
// Synchronized reset for each clock domain

assign pix_clk  = clk_byte_fr;


//-----------------------------------------------------------------------------
// PROCEDURAL BLOCKS
//-----------------------------------------------------------------------------
 /*synthesis translate_off*/
 GSR GSR_INST (1'b1);
 /*synthesis translate_on*/

////added option to use Snow PLL to avoid frequency holes of Mixel PLL
assign tx_refclk = pix_clk;
assign pll_lock  = 1'b1;

//// Snow PLL


  always @(posedge clk_lp_ctrl or negedge reset_n_i)
  begin
      if (~reset_n_i)
      begin
          reset_lp_n_meta <= 0;
          reset_lp_n_sync <= 0;
      end
      else
      begin
          reset_lp_n_meta <= reset_n_i;
          reset_lp_n_sync <= reset_lp_n_meta;
      end
  end


// tx pll is already locked before the rx can start data transfer
  always @(posedge clk_byte_fr or negedge reset_n_i)
  begin
      if (~reset_n_i)
      begin
          reset_byte_fr_n_meta <= 0;
          reset_byte_fr_n_sync <= 0;
      end
      else
      begin
        //  reset_byte_fr_n_meta <= reset_n_i & tx_pll_lock_o;
          reset_byte_fr_n_meta <= reset_n_i && tinit_done_w ;
          reset_byte_fr_n_sync <= reset_byte_fr_n_meta;
      end
  end


csi2_4to1_1_csi2_2_csi2_ip # (
        .RX_CLK_MODE                    (RX_CLK_MODE),
        .TX_CLK_MODE                    (TX_CLK_MODE),
        .DPHY_RX_IP_CH1                 (DPHY_RX_IP_CH1),
        .TINIT_COUNT                    (TINIT_COUNT),
        .LANE_ALIGN                     (LANE_ALIGN),
	.LANE_COUNT                     (1),	  
	.PLL_M                          (PLL_CM),
	.PLL_N                          (PLL_CN),
	.PLL_O                          (PLL_CO),
	.TINIT_VALUE                    (TINIT_VALUE),
	.TX_WAIT_TIME                   (TX_WAIT_TIME),
        .TX_FREQ_TGT                    (TX_FREQ_TGT),
        .RX_GEAR                        (RX_GEAR),
        .TX_GEAR                        (TX_GEAR),
        .DT                             (DT),
        .LBUF_DEPTH                     (LBUF_DEPTH),     
        .VC_CH0                         (VC_CH0),
        .VC_CH1                         (VC_CH1)

	)
	csi2csi_inst
	(
	.reset_n_i                      (reset_n_i),
	//.reset_n_i                    (reset_n_i),
	.reset_lp_n_i                   (reset_lp_n),
	.reset_byte_fr_n_i              (reset_byte_fr_n),

  	.mux_sel_i                      (mux_sel_i),
	.ref_clk_i                      (ref_clk_i), // used as byteclk_fr for hs_lp gear8
////added separate port for pixel clock, added pll lock
        .pix_clk_i                      (pix_clk),
        .pll_lock_i                     (pll_lock),
        .tx_refclk_i                    (tx_refclk),

	.clk_lp_ctrl_i                  (clk_lp_ctrl),
	 

        .rx_byte_clk_fr_ch0             (clk_byte_fr), // from rx_byteclk_ch0
        .clk_ch0_p_i                    (clk_ch0_p_i),
        .clk_ch0_n_i                    (clk_ch0_n_i),
        .clk_ch1_p_i                    (clk_ch1_p_i),
        .clk_ch1_n_i                    (clk_ch1_n_i),
        .clk_ch2_p_i                    (clk_ch2_p_i),
        .clk_ch2_n_i                    (clk_ch2_n_i),
        .clk_ch3_p_i                    (clk_ch3_p_i),
        .clk_ch3_n_i                    (clk_ch3_n_i),

	.d0_ch0_p_i                     (d0_ch0_p_i),
        .d0_ch0_n_i                     (d0_ch0_n_i),
        .d0_ch1_p_i                     (d0_ch1_p_i),
        .d0_ch1_n_i                     (d0_ch1_n_i),
	.d0_ch2_p_i                     (d0_ch2_p_i),
        .d0_ch2_n_i                     (d0_ch2_n_i),
        .d0_ch3_p_i                     (d0_ch3_p_i),
        .d0_ch3_n_i                     (d0_ch3_n_i),

        .d0_p_o                         (d0_p_o),
        .d0_n_o                         (d0_n_o),

	.clk_n_o                        (clk_n_o),
	.clk_p_o                        (clk_p_o),


	.tx_pll_lock_o                  (tx_pll_lock_o),
	.tinit_done_o                   (tinit_done_w),
	// debug port
	.rx0_sp_en_o                    (rx0_sp_en_o),
        .rx0_lp_en_o                    (rx0_lp_en_o),
        .rx0_hs_sync_o                  (rx0_hs_sync_o),
        .rx1_sp_en_o                    (rx1_sp_en_o),
	.rx1_lp_en_o                    (rx1_lp_en_o),
    	.rx1_hs_sync_o                  (rx1_hs_sync_o),
        .tx_fv_en_o                     (tx_fv_en_o),
        .tx_lv_en_o                     (tx_lv_en_o),
        .tx_byte_data_vld               (tx_byte_data_vld)
);



  assign clk_lp_ctrl = 1'b1;



endmodule 
