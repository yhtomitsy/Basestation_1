// arbiter_fsm_beh.v generated by Lattice IP Model Creator version 1
// created on Mon, Jan 30, 2017  8:49:01 AM
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top

`timescale 1 ns / 100 ps
module arbiter_fsm 











(
 input   clk_i,
 input   rst_n_i,


 input   c2d_rdy,


 
 input   hdr0_req,
 input [15:0]   hdr0_wdcnt,
 input [5:0]   hdr0_dtype,
 input [1:0]   hdr0_chID,
 input   hdr0_SPtype,

 input             hdr0_rd_lbfr_en,
 input   hdr0_xfrdone,

 input   hdr1_req,
 input [15:0]   hdr1_wdcnt,
 input [5:0]   hdr1_dtype,
 input [1:0]   hdr1_chID,
 input   hdr1_SPtype,

 input             hdr1_rd_lbfr_en,
 input   hdr1_xfrdone,


 output reg   arb_sp_req,
 output reg [15:0] arb_wdcnt,
 output reg [5:0]  arb_dtype,
 output reg [1:0]  arb_chID,
 output reg   arb_SPtype, 

 output reg        arb_lp_start,


 output reg   arb_gnt0,
 output reg   arb_gnt1,
 output reg   arb_rdy, 



 output reg   arb_c2dreq_o
);
parameter FRAME_START = 6'h00;
parameter FRAME_END = 6'h01;
parameter LINE_START = 6'h02;
parameter LINE_END = 6'h03;
parameter ARB_IDLE = 3'b000;
parameter ARB_GNT0 = 3'b001;
parameter ARB_GNT1 = 3'b010;
parameter ARB_W8BSY= 3'b011;
parameter ARB_W8RDY= 3'b111;
reg    ld551b4;
reg [2:0]    xya8da7;
reg [2:0]    ww46d3a;
reg    wl369d0;
reg                 uxb4e84;

`ifdef LR

`ifdef HALF_MERGE

`else // FULL_MERGE

`endif //end FULL_MERGE

`else //`elsif VC

`endif
reg hqa7425;
reg vk3a12a;
reg [15 : 0] tud0953;
reg [5 : 0] hd84a9a;
reg [1 : 0] je254d7;
reg pu2a6bb;
reg kq535da;
reg mt9aed0;
reg ldd7685;
reg [15 : 0] uxbb42e;
reg [5 : 0] lqda175;
reg [1 : 0] xwd0baa;
reg mt85d52;
reg wy2ea95;
reg uv754a9;
reg fpaa54c;
reg [2 : 0] jc52a66;
reg [2 : 0] ir95333;
reg yma999d;
reg ea4cce8;
reg [2047:0] ps66741;
wire [19:0] ir33a0a;

`ifdef LR

`ifdef HALF_MERGE

`else // FULL_MERGE

`endif //end FULL_MERGE

`else //`elsif VC

`endif

localparam ks9d054 = 20,uve82a1 = 32'hfdffc68b;
localparam [31:0] en4150d = uve82a1;
localparam cz54360 = uve82a1 & 4'hf;
localparam [11:0] yzd82c = 'h7ff;
wire [(1 << cz54360) -1:0] wj60b2b;
reg [ks9d054-1:0] ir2cae1;
reg [cz54360-1:0] gq2b865 [0:1];
reg [cz54360-1:0] vie1949;
reg fpca4a;
integer yx65257;
integer gd292bd;


`ifdef LR


`ifdef HALF_MERGE


`else // FULL_MERGE


`endif //end FULL_MERGE


`else //`elsif VC


`endif













always @(posedge clk_i or negedge rst_n_i) begin  if (!rst_n_i) begin    ld551b4 <= 1'b0;  end  else begin    if (arb_gnt0)      ld551b4 <= 1'b1;     else if (arb_gnt1)      ld551b4 <= 1'b0;     else      ld551b4 <= fpaa54c;  end
end 







always @* begin  arb_rdy   = 1'b0;  arb_gnt0  = 1'b0;  arb_gnt1  = 1'b0;  ww46d3a  = jc52a66;
case (jc52a66)  ARB_IDLE: begin    arb_rdy   = 1'b1;    if (hqa7425) begin      if ((vk3a12a && !fpaa54c) || (vk3a12a && !ldd7685))        ww46d3a  = ARB_GNT0;      else if ((ldd7685 && fpaa54c) || (ldd7685 && !vk3a12a))        ww46d3a  = ARB_GNT1;      else 	ww46d3a  = ARB_IDLE;    end    else     ww46d3a = ARB_IDLE;  end  ARB_GNT0: begin    arb_gnt0  = 1'b1;    if (mt9aed0)      ww46d3a	= ARB_IDLE;   end  ARB_GNT1: begin    arb_gnt1  = 1'b1;    if (uv754a9)      ww46d3a	= ARB_IDLE;   end    
      default: begin     ww46d3a = ARB_IDLE;  end
endcase 
end 

always @(posedge clk_i or negedge rst_n_i) begin  if (!rst_n_i) begin    uxb4e84 <= 1'b0;  end  else begin    if (arb_gnt1)      uxb4e84 <= 1'b1;    else if (hqa7425)      uxb4e84 <= 1'b0;  end
end
always @(posedge clk_i or negedge rst_n_i) begin  if (!rst_n_i) begin    xya8da7 <= ARB_IDLE;  end  else begin    xya8da7 <= ir95333;  end
end

always @* begin  if (arb_gnt1 || ea4cce8) begin
    arb_dtype  = lqda175[5:0];    arb_chID  = xwd0baa[1:0];    arb_SPtype  = mt85d52;     end  else begin
    arb_dtype  = hd84a9a[5:0];    arb_chID   = je254d7[1:0];    arb_SPtype = pu2a6bb;    end
end


`ifdef LR



`ifdef HALF_MERGE

always @* begin    arb_wdcnt = tud0953;
end


`else // FULL_MERGE

always @* begin    arb_wdcnt = pu2a6bb ? tud0953 : {tud0953[14:0],1'b0};
end


`endif //end FULL_MERGE




`else //`elsif VC

always @* begin  if (arb_gnt1 || ea4cce8)    arb_wdcnt = uxbb42e;  else    arb_wdcnt = tud0953;
end

`endif




always @(posedge clk_i or negedge rst_n_i) begin  if (!rst_n_i) begin    wl369d0 <= 1'b0;  end  else begin    wl369d0 <= arb_gnt0 || arb_gnt1;  end
end
always @* begin  arb_c2dreq_o = (arb_gnt0 || arb_gnt1) && !yma999d;
end
always @* begin  arb_sp_req  = arb_c2dreq_o && arb_SPtype;
  arb_lp_start  = arb_c2dreq_o && !arb_SPtype;
end


always@* begin hqa7425<=ir33a0a[0];vk3a12a<=ir33a0a[1];tud0953<={hdr0_wdcnt>>1,ir33a0a[2]};hd84a9a<={hdr0_dtype>>1,ir33a0a[3]};je254d7<={hdr0_chID>>1,ir33a0a[4]};pu2a6bb<=ir33a0a[5];kq535da<=ir33a0a[6];mt9aed0<=ir33a0a[7];ldd7685<=ir33a0a[8];uxbb42e<={hdr1_wdcnt>>1,ir33a0a[9]};lqda175<={hdr1_dtype>>1,ir33a0a[10]};xwd0baa<={hdr1_chID>>1,ir33a0a[11]};mt85d52<=ir33a0a[12];wy2ea95<=ir33a0a[13];uv754a9<=ir33a0a[14];fpaa54c<=ir33a0a[15];jc52a66<={xya8da7>>1,ir33a0a[16]};ir95333<={ww46d3a>>1,ir33a0a[17]};yma999d<=ir33a0a[18];ea4cce8<=ir33a0a[19];end
always@* begin ps66741[2047]<=hdr0_req;ps66741[2046]<=hdr0_wdcnt[0];ps66741[2044]<=hdr0_dtype[0];ps66741[2040]<=hdr0_chID[0];ps66741[2032]<=hdr0_SPtype;ps66741[2017]<=hdr0_rd_lbfr_en;ps66741[1987]<=hdr0_xfrdone;ps66741[1926]<=hdr1_req;ps66741[1805]<=hdr1_wdcnt[0];ps66741[1679]<=xya8da7[0];ps66741[1562]<=hdr1_dtype[0];ps66741[1310]<=ww46d3a[0];ps66741[1144]<=uxb4e84;ps66741[1076]<=hdr1_chID[0];ps66741[1023]<=c2d_rdy;ps66741[839]<=ld551b4;ps66741[572]<=wl369d0;ps66741[419]<=hdr1_xfrdone;ps66741[209]<=hdr1_rd_lbfr_en;ps66741[104]<=hdr1_SPtype;end         assign wj60b2b = ps66741,ir33a0a = ir2cae1; initial begin yx65257 = $fopen(".fred"); $fdisplay( yx65257, "%3h\n%3h", (en4150d >> 4) & yzd82c, (en4150d >> (cz54360+4)) & yzd82c ); $fclose(yx65257); $readmemh(".fred", gq2b865); end always @ (wj60b2b) begin vie1949 = gq2b865[1]; for (gd292bd=0; gd292bd<ks9d054; gd292bd=gd292bd+1) begin ir2cae1[gd292bd] = wj60b2b[vie1949]; fpca4a = ^(vie1949 & gq2b865[0]); vie1949 = {vie1949, fpca4a}; end end 
endmodule

